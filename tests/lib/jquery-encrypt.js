/*!
 * jQuery JavaScript Library v1.11.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-23T21:02Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module[([][+[]]+'').charAt((-~-~''-~''))+'xp'+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(![]+'').charAt((-~-~[]-~[]))] === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module[(''[+[]]+'').charAt((-~-~[]-~''))+'xp'+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~-~''-~[]))] = global[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))] ?
			factory( global, true ) :
			function( w ) {
				if ( !w[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))] ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds[(!{}+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))];

var concat = deletedIds[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-[]))];

var push = deletedIds['p'+(''[+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~''-~''))+'h'];

var indexOf = deletedIds[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(![]+[]).charAt((-''))];

var class2type = {};

var toString = class2type[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+'g'];

var hasOwn = class2type['h'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~-~[])))+'w'+([][+[]]+'').charAt((-~''))+'P'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'p'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((+[]))+'y'];

var trim = ""[(!''+[]).charAt((-[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'m'];

var support = {};



var
	version = "1.11.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery[(!!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~[]))][([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-''))]( selector, context );
	},

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((''[+[]]+'').charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'pp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]();
	};

jQuery[(![]+[]).charAt((-''))+(''[+[]]+'').charAt((-~[]))] = jQuery['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~''))]( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return a 'clean' array
			( num < 0 ? this[ num + this[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] ] : this[ num ] ) :

			// Return just the object
			slice[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(![]+[]).charAt((-~-~[]))]( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery['m'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~''-~''))]( this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))](), elems );

		// Add the old object onto the stack (as a reference)
		ret['p'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-[]))] = this;
		ret[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+''))] = this[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+[]))];

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery[(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']( this, callback, args );
	},

	map: function( callback ) {
		return this['p'+(''[+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~[]-~[]))+'h'+((!{}+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'k']( jQuery['m'+(!{}+'').charAt((-~''))+'p'](this, function( elem, i ) {
			return callback[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))]( elem, i, elem );
		}));
	},

	slice: function() {
		return this['p'+(''[+[]]+'').charAt((+''))+(![]+[]).charAt((-~-~[]-~''))+'h'+((!{}+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k']( slice[(![]+[]).charAt((-~[]))+'pp'+(!{}+'').charAt((-~-~''))+'y']( this, arguments ) );
	},

	first: function() {
		return this[(''[+[]]+'').charAt((-~-~[]-~''))+'q']( 0 );
	},

	last: function() {
		return this[(''[+[]]+'').charAt((-~-~[]-~[]))+'q']( -1 );
	},

	eq: function( i ) {
		var len = this[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'],
			j = +i + ( i < 0 ? len : 0 );
		return this['p'+([][+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]-~''))+'h'+((![]+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k']( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this['p'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''+{}).charAt(((-~-~''<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+''))] || this[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((+[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))](null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds[(![]+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))],
	splice: deletedIds[(!{}+[]).charAt((-~-~[]-~''))+'p'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]
};

jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))] = jQuery[(!{}+'').charAt((-[]))+(''[+[]]+'').charAt((-~[]))][(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))] = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'],
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+((!{}+'').charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))](target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''-~''))+'P'+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-[]))](copy) || (copyIsArray = jQuery[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~[]-~''))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~[]))+'y'](copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]-~''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-~''))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+'y'](src) ? src : [];

					} else {
						clone = src && jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+'P'+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((+[]))](src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math[(!''+[]).charAt((-~''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+'m']() )[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!{}+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))](obj) === "function";
	},

	isArray: Array[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~[]))+((!{}+'').charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(!{}+'').charAt((-~''))+'y'] || function( obj ) {
		return jQuery[(!''+[]).charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))](obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj['w'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'w'];
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery[(!''+[]).charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))](obj) !== "object" || obj[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] || jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~''-~''))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w']( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))] &&
				!hasOwn[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))](obj, "constructor") &&
				!hasOwn[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))](obj[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((+''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))]['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~''-~''))], "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))] ) {
			for ( key in obj ) {
				return hasOwn[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~-~''))]( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+(![]+[]).charAt((-~-~''))]( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]))](obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery[(!''+[]).charAt((-[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'m']( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+((![]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'p'+(!''+'').charAt((-''))] || function( data ) {
				window[ "eval" ][(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~-~''))]( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'p'+(!!''+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] && elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))][(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]() === name[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'],
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback[(!!''+[]).charAt((-~''))+'pp'+(![]+[]).charAt((-~-~''))+'y']( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback[(![]+[]).charAt((-~''))+'pp'+(![]+[]).charAt((-~-~''))+'y']( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))+(![]+[]).charAt((-~-~[]))]( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]))]( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: trim && !trim[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				trim[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(![]+'').charAt((-~-~[]))]( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" )[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery['m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~''-~[]))]( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))]( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( arr, elem, i );
			}

			len = arr[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'];
			i = i ? i < 0 ? Math['m'+(!!''+[]).charAt((-~''))+'x']( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'],
			j = 0,
			i = first[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'];

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'],
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches['p'+(''[+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~[]-~[]))+'h']( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'],
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret['p'+([][+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~[]))+'h']( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret['p'+([][+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~[]))+'h']( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat[(!!''+[]).charAt((-~[]))+'pp'+(![]+[]).charAt((-~-~''))+'y']( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~-~''-~[]))+((!!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]( arguments, 2 );
		proxy = function() {
			return fn[(!{}+'').charAt((-~''))+'pp'+(![]+[]).charAt((-~-~[]))+'y']( context || this, args[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((-''))]( slice[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~''))]( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy['g'+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]))] = fn['g'+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))] = fn['g'+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))] || jQuery['g'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]))]++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h']("Boolean Number String Function Array Date RegExp Object Error"[(!{}+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+''))](" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]();
});

function isArraylike( obj ) {
	var length = obj[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+[]))+'h'],
		type = jQuery[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))]( obj );

	if ( type === "function" || jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''-~''))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'w']( obj ) ) {
		return false;
	}

	if ( obj[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.16
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-13
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))],
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({})['h'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~-~[])))+'w'+(''[+[]]+'').charAt((-~''))+'P'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+'y'],
	arr = [],
	pop = arr['p'+(''+{}).charAt((-~''))+'p'],
	push_native = arr['p'+(''[+[]]+'').charAt((-[]))+(![]+'').charAt((-~-~''-~[]))+'h'],
	push = arr['p'+([][+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~''))+'h'],
	slice = arr[(![]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))],
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~''<<-~-~[])))+(!{}+'').charAt((-[]))] || function( elem ) {
		var i = 0,
			len = this[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'];
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'p'+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~[]))]( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String[(!!''+[]).charAt((+''))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'m'+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String[(!{}+'').charAt((+[]))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'m'+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push[(![]+[]).charAt((-~''))+'pp'+(!{}+[]).charAt((-~-~[]))+'y'](
		(arr = slice[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~''))]( preferredDoc[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~''))] )),
		preferredDoc[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~''))]
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~[]))][(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'] ][([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))];
} catch ( e ) {
	push = { apply: arr[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'] ?

		// Leverage slice if possible
		function( target, els ) {
			push_native[(!!''+[]).charAt((-~''))+'pp'+(!!''+[]).charAt((-~-~''))+'y']( target, slice[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))](els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'],
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-[]))+'h'] = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))] || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))]) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+((''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''))]( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem['p'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))] === m ) {
							results['p'+(''[+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~''-~''))+'h']( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))] && (elem = context[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))]['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+(([][+[]]+'').charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]))]( m )) &&
						contains( context, elem ) && elem[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]))] === m ) {
						results['p'+([][+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~''-~[]))+'h']( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push[(!{}+'').charAt((-~''))+'pp'+(!!''+[]).charAt((-~-~[]))+'y']( results, context['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))]( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+(!{}+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'y'+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] && context['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
				push[(![]+[]).charAt((-~[]))+'pp'+(![]+'').charAt((-~-~[]))+'y']( results, context['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~''))+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( m ) );
				return results;
			}
		}

		// QSA path
		if ( support['q'+(!!''+[]).charAt((-~-~''-~''))+(!!''+[]).charAt((-~[]))] && (!rbuggyQSA || !rbuggyQSA[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))]( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))][(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+((!!''+[]).charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]("id")) ) {
					nid = old[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( rescape, "\\$&" );
				} else {
					context[(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((![]+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-''))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))]( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'];
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))]( selector ) && testContext( context['p'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] ) || context;
				newSelector = groups[(''+{}).charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))](",");
			}

			if ( newSelector ) {
				try {
					push[(![]+'').charAt((-~''))+'pp'+(!{}+[]).charAt((-~-~''))+'y']( results,
						newContext['q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'y'+((![]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+((![]+'').charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~-~''))]( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))]("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys['p'+([][+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~''-~[]))+'h']( key + " " ) > Expr[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~''))+((![]+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'] ) {
			// Only keep the most recent entries
			delete cache[ keys[(![]+'').charAt((-~-~[]-~[]))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((+''))+(!''+[]).charAt((-''))]() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))]("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div['p'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] ) {
			div['p'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))][(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs[(!{}+'').charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-''))]("|"),
		i = attrs[(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];

	while ( i-- ) {
		Expr[(!!''+[]).charAt((-~[]))+(!''+'').charAt((-''))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+'H'+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))][ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] === 1 && b[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 &&
			( ~b[(!{}+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'] || MAX_NEGATIVE ) -
			( ~a[(![]+'').charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'] || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur[([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-''))+((![]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+'g']) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))][(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((![]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]();
		return name === "input" && elem[(!''+'').charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))][(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]();
		return (name === "input" || name === "button") && elem[(!''+[]).charAt((-[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'], argument ),
				i = matchIndexes[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'];

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+((!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))] !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle[(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((+[]))+'pp'+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-''))] = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~''))+'XM'+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()] = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))] || elem)[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))];
	return documentElement ? documentElement[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(![]+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle[(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))] = function( node ) {
	var hasCompare,
		doc = node ? node[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))] || node : preferredDoc,
		parent = doc[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((+''))+(![]+'').charAt((-~-~[]))+(!''+[]).charAt((+[]))+'V'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'w'];

	// If no document and documentElement is available, return
	if ( doc === document || doc[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] !== 9 || !doc[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))] ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))];

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'p'] ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent[(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+((![]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))] ) {
			parent[(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))]( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent[(!{}+'').charAt((-~''))+(!''+[]).charAt((+[]))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))] ) {
			parent[(!!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(!''+[]).charAt((-''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support[(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''-~[]))] = assert(function( div ) {
		div[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''))+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] = "i";
		return !div['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((![]+'').charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-[]))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))]("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(!{}+[]).charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+((!''+[]).charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] = assert(function( div ) {
		div[(![]+'').charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( doc[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'mm'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]("") );
		return !div['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(![]+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'y'+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] = rnative[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))]( doc['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'y'+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] ) && assert(function( div ) {
		div[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'H'+((!''+[]).charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()] = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div[(!{}+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~''))+(+{}+'').charAt((-''))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(![]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+((''[+[]]+'').charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''))] = assert(function( div ) {
		docElem[(![]+'').charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( div ).id = expando;
		return !doc['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(![]+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))] || !doc['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+(+{}+'').charAt((+[]))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( expando ).length;
	});

	// ID find and filter
	if ( support['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'y'+(([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''))] ) {
		Expr[(![]+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]["ID"] = function( id, context ) {
			if ( typeof context['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+(([][+[]]+'').charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~''))] !== strundefined && documentIsHTML ) {
				var m = context['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+(([][+[]]+'').charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''))]( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m['p'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))] ? [m] : [];
			}
		};
		Expr[(![]+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))]["ID"] = function( id ) {
			var attrId = id[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!{}+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( runescape, funescape );
			return function( elem ) {
				return elem['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!''+[]).charAt((-''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))]("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr[(![]+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]["ID"];

		Expr[(![]+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))]["ID"] =  function( id ) {
			var attrId = id[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( runescape, funescape );
			return function( elem ) {
				var node = typeof elem['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((!{}+'').charAt((-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-[]))+(!''+'').charAt((-''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] !== strundefined && elem['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+((![]+'').charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!''+[]).charAt((-''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))]("id");
				return node && node['v'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))] === attrId;
			};
		};
	}

	// Tag
	Expr[(!{}+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]["TAG"] = support['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(![]+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] ?
		function( tag, context ) {
			if ( typeof context['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(![]+'').charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+((!''+'').charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+'g'+(+{}+'').charAt((+[]))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] !== strundefined ) {
				return context['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(!{}+'').charAt((-~-~[]-~''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+'g'+(+{}+'').charAt((-''))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'y'+((!''+[]).charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~''))+'g'+(+{}+'').charAt((+''))+(![]+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 ) {
						tmp['p'+(''[+[]]+'').charAt((+''))+(![]+'').charAt((-~-~''-~''))+'h']( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr[(![]+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]["CLASS"] = support['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~-~''-~[]))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'y'+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] && function( className, context ) {
		if ( typeof context['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] !== strundefined && documentIsHTML ) {
			return context['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))]( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support['q'+(!{}+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~''))] = rnative[(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+[]))]( doc['q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'y'+((!{}+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))] )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'H'+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'M'+((!!''+[]).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()] = "<select t=''><option selected=''></option></select>";

			// Support: IE8, Opera 10-12
			// Nothing should be selected when empty strings follow ^= or $= or *=
			if ( div['q'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'y'+((!{}+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))]("[t^='']").length ) {
				rbuggyQSA['p'+([][+[]]+'').charAt((+''))+(!!''+[]).charAt((-~-~[]-~[]))+'h']( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div['q'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'y'+((!{}+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+((![]+[]).charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))]("[selected]").length ) {
				rbuggyQSA['p'+([][+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~''-~[]))+'h']( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div['q'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'y'+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+((![]+[]).charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))](":checked").length ) {
				rbuggyQSA['p'+(''[+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~''-~[]))+'h'](":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))]("input");
			input[(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-''))+(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))]( "type", "hidden" );
			div[(![]+'').charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div['q'+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'y'+((!{}+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+((!{}+'').charAt((-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]("[name=d]").length ) {
				rbuggyQSA['p'+([][+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''-~''))+'h']( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div['q'+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'y'+((!{}+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+((![]+'').charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~''))](":enabled").length ) {
				rbuggyQSA['p'+([][+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))+'h']( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div['q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'y'+((![]+[]).charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+((!!''+[]).charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~''))]("*,:x");
			rbuggyQSA['p'+(''[+[]]+'').charAt((-''))+(![]+'').charAt((-~-~[]-~''))+'h'](",.*:");
		});
	}

	if ( (support['m'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+((![]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))] = rnative[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+[]))]( (matches = docElem['w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~-~[]))+'k'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((+[]))+'M'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~[]))+((![]+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))] ||
		docElem['m'+(''+{}).charAt((-~[]))+'zM'+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))] ||
		docElem[(''+{}).charAt((-~[]))+'M'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))] ||
		docElem['m'+(!{}+'').charAt((-~-~''-~[]))+'M'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~''))+((!!''+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))]) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))+'M'+(!!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'] = matches[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~-~''))]( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))]( div, "[s!='']:x" );
			rbuggyMatches['p'+([][+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''-~''))+'h']( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h'] && new RegExp( rbuggyQSA[(''+{}).charAt((-~-~''-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))]("|") );
	rbuggyMatches = rbuggyMatches[(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] && new RegExp( rbuggyMatches[(''+{}).charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))]("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''-~''))+(!''+'').charAt((+[]))]( docElem[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+'mp'+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+'P'+(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))] );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))]( docElem[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))] ) ?
		function( a, b ) {
			var adown = a[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 9 ? a[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))] : a,
				bup = b && b['p'+(![]+'').charAt((-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))];
			return a === bup || !!( bup && bup[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 1 && (
				adown[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))] ?
					adown[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))]( bup ) :
					a[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+'mp'+(![]+'').charAt((-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+'P'+(''+{}).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))] && a[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+'mp'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+'P'+(''+{}).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b['p'+(![]+'').charAt((-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))]) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+'mp'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+'P'+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))] - !b[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+'mp'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+'P'+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))];
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a[(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))] || a ) === ( b[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))] || b ) ?
			a[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+'mp'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+'P'+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support[(![]+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))] && b[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+'mp'+(![]+'').charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+'P'+(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))] === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( sortInput, a ) - indexOf[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))]( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a['p'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))],
			bup = b['p'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))],
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))]( sortInput, a ) - indexOf[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))]( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur['p'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]) ) {
			ap[(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((+[]))+(!''+'').charAt((+[]))]( cur );
		}
		cur = b;
		while ( (cur = cur['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))]) ) {
			bp[(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-[]))+(!''+[]).charAt((+[]))]( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle['m'+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))] = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle['m'+(![]+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~[]))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))] = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( rattributeQuotes, "='$1']" );

	if ( support['m'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~[]))+((![]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))] && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches[(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))]( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))]( expr ) ) ) {

		try {
			var ret = matches[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))]( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))+'M'+(!{}+'').charAt((-~''))+(!''+'').charAt((-''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'] ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))] && elem[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] )[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] > 0;
};

Sizzle[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))] = function( context, elem ) {
	// Set document vars if needed
	if ( ( context[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))] || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle[(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-''))+(!''+[]).charAt((-~''))] = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem[(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))] || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr[(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+'H'+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][ name[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((![]+[]).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~-~''))]( Expr[(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(!''+[]).charAt((-''))+(!''+[]).charAt((-~[]))+'H'+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))], name[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support[(!!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~''))] || !documentIsHTML ?
			elem['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+((!{}+'').charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))]( name ) :
			(val = elem['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))](name)) && val[(!!''+[]).charAt((-~-~''-~''))+'p'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))] ?
				val['v'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))] :
				null;
};

Sizzle[(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))] = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle[(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'q'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+((![]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+(!''+[]).charAt((-[]))] = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((+''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((+[]))+'p'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''-~''))];
	sortInput = !support[(!{}+[]).charAt((-~-~''-~[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((-''))+((![]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-''))+(!{}+'').charAt((-~[]))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))] && results[(!!''+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( 0 );
	results[(![]+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+''))]( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates['p'+(''[+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]-~[]))+'h']( i );
			}
		}
		while ( j-- ) {
			results[(![]+'').charAt((-~-~''-~[]))+'p'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-''))] = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))];

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))] === "string" ) {
			return elem[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))];
		} else {
			// Traverse its children
			for ( elem = elem[(!{}+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]; elem; elem = elem[([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))+((![]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+'g'] ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'V'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))];
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle[(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))] = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1][(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~[]))]( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" )[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+'').charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match[(!!''+[]).charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1][(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!{}+[]).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]();

			if ( match[1][(![]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle[([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))]( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle[(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))]( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"][(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))]( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))]( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(''+{}).charAt(((-~-~''<<-~-~'')))+(!{}+[]).charAt((-''))]( ")", unquoted[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'] - excess ) - unquoted[(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h']) ) {

				// excess is a negative index
				match[0] = match[0][(![]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''-~''))]( 0, excess );
				match[2] = unquoted[(!!''+[]).charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match[(!{}+[]).charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'p'+(!!''+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] && elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))][(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))]( typeof elem[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] === "string" && elem[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] || typeof elem['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+((!{}+[]).charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))] !== strundefined && elem['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(!''+[]).charAt((-[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))]("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle[(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+(!''+'').charAt((-''))+(!''+'').charAt((-~''))]( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!{}+[]).charAt((+[]))]( check ) === 0 :
					operator === "*=" ? check && result[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~''<<-~-~[])))+(![]+'').charAt((-''))]( check ) > -1 :
					operator === "$=" ? check && result[(![]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( -check[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] ) === check :
					operator === "~=" ? ( " " + result + " " )[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(!{}+[]).charAt((-[]))]( check ) > -1 :
					operator === "|=" ? result === check || result[(!{}+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( 0, check[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-[]))+'h'] + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type[(![]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( 0, 3 ) !== "nth",
				forward = type[(![]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem['p'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))];
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem['p'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))],
						name = ofType && elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))][(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))](),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))][(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]() === name : node[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent[(![]+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))] : parent[(![]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))] ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~''))][ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start['p'+(''+{}).charAt((-~[]))+'p']()) ) {

								// When found, cache indexes on `parent` and break
								if ( node[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start['p'+(''+{}).charAt((-~[]))+'p']()) ) {

								if ( ( ofType ? node[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))][(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]() === name : node[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr['p'+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))][ pseudo ] || Expr[(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+((![]+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))][ pseudo[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+((!!''+[]).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]() ] ||
					Sizzle[(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))]( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn[(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'] > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr[(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+((![]+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))]['h'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~-~'')))+'w'+([][+[]]+'').charAt((-~''))+'P'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'p'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+'y']( pseudo[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'];
						while ( i-- ) {
							idx = indexOf[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~-~[]))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'];

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results['p'+(''+{}).charAt((-~[]))+'p']();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem )[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h'] > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))] || elem[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((!''+[]).charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+[]))] || getText( elem ) )[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!{}+[]).charAt((-''))]( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))](lang || "") ) {
				Sizzle[([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))]( "unsupported lang: " + lang );
			}
			lang = lang[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem[(!{}+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+'g'] :
						elem['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((+[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]("xml:lang") || elem['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((![]+'').charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-''))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))]("lang")) ) {

						elemLang = elemLang[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]();
						return elemLang === lang || elemLang[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(![]+'').charAt((-''))]( lang + "-" ) === 0;
					}
				} while ( (elem = elem['p'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]) && elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window[(![]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))] && window[(![]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]['h'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+'h'];
			return hash && hash[(!{}+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( 1 ) === elem[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))];
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document[(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))] && (!document['h'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+((![]+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]-~[]))] || document['h'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+((![]+'').charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~''))]()) && !!(elem[(!''+'').charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] || elem['h'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((+''))] || ~elem[(!''+[]).charAt((-''))+(!{}+[]).charAt((-~''))+(''+{}).charAt((-~-~''))+(([][+[]]+'').charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'x']);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))] === false;
		},

		"disabled": function( elem ) {
			return elem[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))][(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+((![]+[]).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]();
			return (nodeName === "input" && !!elem[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))]) || (nodeName === "option" && !!elem[(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''))]);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))] ) {
				elem['p'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))][(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''))+((''[+[]]+'').charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'];
			}

			return elem[(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]))] === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem[(!!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]; elem; elem = elem[(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))+((![]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+'g'] ) {
				if ( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr['p'+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))]["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+[]))]( elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] );
		},

		"input": function( elem ) {
			return rinputs[(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))]( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] );
		},

		"button": function( elem ) {
			var name = elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))][(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+((![]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]();
			return name === "input" && elem[(!''+[]).charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))][(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]() === "input" &&
				elem[(!''+'').charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+((![]+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((+''))+(!''+[]).charAt((+[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))]("type")) == null || attr[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+((!{}+[]).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes['p'+(''[+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''-~[]))+'h']( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes['p'+([][+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]-~''))+'h']( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes['p'+([][+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~''-~''))+'h']( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes['p'+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~[]-~''))+'h']( i );
			}
			return matchIndexes;
		})
	}
};

Expr['p'+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))]["nth"] = Expr['p'+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))]["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr['p'+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))][ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr['p'+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))][ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~''-~''))] = Expr[(!{}+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))] = Expr['p'+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))];
Expr[(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((![]+[]).charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))] = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached[(![]+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr['p'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((![]+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))];

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))]( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar[(!{}+[]).charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( match[0][(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'] ) || soFar;
			}
			groups['p'+([][+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~[]-~[]))+'h']( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators[([][+[]]+'').charAt((-~-~''-~[]))+'x'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))]( soFar )) ) {
			matched = match[(!!''+[]).charAt((-~-~''-~''))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((+[]))+(!''+[]).charAt((+''))]();
			tokens['p'+([][+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]-~[]))+'h']({
				value: matched,
				// Cast descendant combinators to space
				type: match[0][(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( rtrim, " " )
			});
			soFar = soFar[(!!''+[]).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( matched[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] );
		}

		// Filters
		for ( type in Expr[(![]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))] ) {
			if ( (match = matchExpr[ type ][(''[+[]]+'').charAt((-~-~''-~[]))+'x'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))]( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match[(!!''+[]).charAt((-~-~[]-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((+[]))+(!''+'').charAt((+[]))]();
				tokens['p'+(''[+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~[]-~[]))+'h']({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar[(!!''+[]).charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( matched[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'] );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar[(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] :
		soFar ?
			Sizzle[(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))]( selector ) :
			// Cache the tokens
			tokenCache( selector, groups )[(!!''+[]).charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'],
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i]['v'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))];
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator[([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~''))],
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator[(!!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))] ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'] > 1 ?
		function( elem, context, xml ) {
			var i = matchers[(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'];
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'],
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched['p'+([][+[]]+'').charAt((-[]))+(![]+[]).charAt((-~-~''-~''))+'h']( elem );
				if ( mapped ) {
					map['p'+(''[+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~[]))+'h']( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'],

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp[(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut[(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'];
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp['p'+(''[+[]]+'').charAt((-''))+(![]+'').charAt((-~-~[]-~''))+'h']( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'];
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~''))]( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut[(!{}+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( preexisting, matcherOut[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push[(![]+[]).charAt((-~[]))+'pp'+(!{}+'').charAt((-~-~[]))+'y']( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'],
		leadingRelative = Expr[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))][ tokens[0][(!''+'').charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ],
		implicitRelative = leadingRelative || Expr[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))][" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~''))]( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context)[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))][ tokens[i][(!''+'').charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr[(!{}+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))][ tokens[i][(!''+[]).charAt((-[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] ][(![]+[]).charAt((-~''))+'pp'+(!!''+[]).charAt((-~-~[]))+'y']( null, tokens[i]['m'+(![]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~[]))] );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))][ tokens[j][(!''+[]).charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens[(!{}+[]).charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( 0, i - 1 ).concat({ value: tokens[ i - 2 ][(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === " " ? "*" : "" })
					)[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!!''+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens[(!{}+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens[(!!''+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers['p'+([][+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~[]))+'h']( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] > 0,
		byElement = elementMatchers[(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'] > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr[(!!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math[(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'m']() || 0.1),
				len = elems[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'];

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results['p'+([][+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~[]-~''))+'h']( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched['p'+([][+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~[]-~''))+'h']( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~''))]( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push[(!{}+[]).charAt((-~''))+'pp'+(![]+[]).charAt((-~-~''))+'y']( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'] > 0 &&
					( matchedCount + setMatchers[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] ) > 1 ) {

					Sizzle[([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+((!{}+[]).charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+(!''+'').charAt((-''))]( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+'mp'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))] = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'];
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers['p'+([][+[]]+'').charAt((-[]))+(![]+'').charAt((-~-~''-~[]))+'h']( cached );
			} else {
				elementMatchers['p'+(''[+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''-~''))+'h']( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'];
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'] === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0][(!!''+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))]( 0 );
			if ( tokens[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'] > 2 && (token = tokens[0])[(!''+'').charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] === "ID" &&
					support['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'y'+(([][+[]]+'').charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''))] && context[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] === 9 && documentIsHTML &&
					Expr[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))][ tokens[1][(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] ] ) {

				context = ( Expr[(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]["ID"]( token['m'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))][0][(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))](runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector[(![]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( tokens[(!{}+[]).charAt((-~-~[]-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((+[]))+(!''+[]).charAt((+[]))]().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"][(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))]( selector ) ? 0 : tokens[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'];
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))][ (type = token[(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))]) ] ) {
					break;
				}
				if ( (find = Expr[(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))][ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token['m'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))][0][(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( runescape, funescape ),
						rsibling[(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( tokens[0][(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] ) && testContext( context['p'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))] ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens[(!{}+'').charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( i, 1 );
						selector = seed[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'] && toSelector( tokens );
						if ( !selector ) {
							push[(!{}+[]).charAt((-~[]))+'pp'+(!!''+[]).charAt((-~-~[]))+'y']( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))]( selector ) && testContext( context['p'+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] ) || context
	);
	return results;
}

// One-time assignments

// Sort stability
support[(![]+[]).charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-''))+(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))] = expando[(![]+'').charAt((-~-~''-~''))+'p'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-''))]("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-[]))+'p'+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''-~''))] = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support[(![]+[]).charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))] = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+'mp'+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+'P'+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( document[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))]("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'M'+((![]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()] = "<a href='#'></a>";
	return div[(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))]("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+((![]+[]).charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((+''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))]( name, name[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support[(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~[]))] || !assert(function( div ) {
	div[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'H'+((!''+'').charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()] = "<input/>";
	div[(!!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))][(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+''))+(!''+[]).charAt((+[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]( "value", "" );
	return div[(![]+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))]['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-[]))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))]( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))][(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]() === "input" ) {
			return elem[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((+[]))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((-[]))+'V'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))];
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))]("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]() :
					(val = elem['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((![]+[]).charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( name )) && val[(!{}+[]).charAt((-~-~[]-~[]))+'p'+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))] ?
					val['v'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))] :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery[(![]+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))] = Sizzle;
jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'xp'+(!''+'').charAt((-~[]))] = Sizzle[(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))];
jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!''+[]).charAt((-~[]))][":"] = jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!''+[]).charAt((-~''))]['p'+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))];
jQuery[([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'q'+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))] = Sizzle[([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))];
jQuery[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+[]))] = Sizzle['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-''))];
jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+'XM'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))] = Sizzle[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~''))+'XM'+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()];
jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))] = Sizzle[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))];



var rneedsContext = jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'xp'+(!''+[]).charAt((-~''))]['m'+(!!''+[]).charAt((-~''))+(!''+'').charAt((+''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'][([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+[]))];

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]-~''))+((!{}+'').charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( qualifier ) ) {
		return jQuery['g'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'p']( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))]( elem, i, elem ) !== not;
		});

	}

	if ( qualifier[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] ) {
		return jQuery['g'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'p']( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))]( qualifier ) ) {
			return jQuery[(!!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))]( qualifier, elements, not );
		}

		qualifier = jQuery[(![]+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))]( qualifier, elements );
	}

	return jQuery['g'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'p']( elements, function( elem ) {
		return ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~''))+'y']( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery[(!!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))] = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems[(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-[]))+'h'] === 1 && elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 ?
		jQuery[(!{}+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))]['m'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))]( elem, expr ) ? [ elem ] : [] :
		jQuery[(!{}+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]['m'+(![]+'').charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))]( expr, jQuery['g'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'p']( elems, function( elem ) {
			return elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === 1;
		}));
};

jQuery[(!{}+[]).charAt((-''))+([][+[]]+'').charAt((-~[]))][(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self[(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'];

		if ( typeof selector !== "string" ) {
			return this['p'+([][+[]]+'').charAt((+''))+(![]+'').charAt((-~-~[]-~''))+'h'+((![]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k']( jQuery( selector )[(![]+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))](function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))]( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery[(!!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this['p'+(''[+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~[]-~[]))+'h'+((!{}+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k']( len > 1 ? jQuery[(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'q'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))]( ret ) : ret );
		ret[(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))] = this[(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))] ? this[(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))] + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this['p'+([][+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~''))+'h'+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k']( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this['p'+([][+[]]+'').charAt((-[]))+(![]+[]).charAt((-~-~''-~[]))+'h'+((![]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k']( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))]( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		)[(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-[]))+'h'];
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))],

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery[(!!''+[]).charAt((+''))+([][+[]]+'').charAt((-~''))][([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-''))] = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+((!{}+'').charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))](0) === "<" && selector[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~[]))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+[]))]( selector[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] - 1 ) === ">" && selector[(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr[(''[+[]]+'').charAt((-~-~''-~''))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))]( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery['m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~[]-~[]))]( this, jQuery['p'+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'H'+((!''+'').charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'M'+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()](
						match[1],
						context && context[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] ? context[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))] || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))]( match[1] ) && jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~[]))+'P'+(!{}+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-[]))]( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+((![]+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this[(![]+'').charAt((-~''))+(!''+'').charAt((+[]))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~[]))]( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'y'+((''[+[]]+'').charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''))]( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem['p'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]))] !== match[2] ) {
							return rootjQuery[(!{}+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))]( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] = 1;
						this[0] = elem;
					}

					this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((+[]))] = document;
					this[(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))] = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context[(''+{}).charAt((-~-~[]-~[]))+'q'+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'y'] ) {
				return ( context || rootjQuery )[(![]+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))]( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] ) {
			this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+''))] = this[0] = selector;
			this[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h'] = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]-~''))+((!{}+[]).charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))]( selector ) ) {
			return typeof rootjQuery[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'] !== "undefined" ?
				rootjQuery[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+'y']( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector[(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))] !== undefined ) {
			this[(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))] = selector[(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))];
			this[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+[]))] = selector[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+[]))];
		}

		return jQuery['m'+(!!''+[]).charAt((-~''))+'k'+(''[+[]]+'').charAt((-~-~[]-~''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~''))+'y']( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] = jQuery[(!{}+[]).charAt((+[]))+(''[+[]]+'').charAt((-~''))];

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] !== 9 && (until === undefined || cur[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] !== 1 || !jQuery( cur )[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))]( until )) ) {
			if ( cur[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 ) {
				matched['p'+(''[+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~[]-~''))+'h']( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n[([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+''))+((!{}+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+'g'] ) {
			if ( n[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 && n !== elem ) {
				r['p'+(''[+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]-~''))+'h']( n );
			}
		}

		return r;
	}
});

jQuery[(!!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~[]))][([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'];

		return this[(![]+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))](function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))]( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'],
			matched = [],
			pos = rneedsContext[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))]( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((-''))] ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur['p'+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] ) {
				// Always skip document fragments
				if ( cur[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((-'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] < 11 && (pos ?
					pos[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'](cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] === 1 &&
						jQuery[(!{}+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))]['m'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~''))+((!!''+[]).charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))](cur, selectors)) ) {

					matched['p'+(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~''-~[]))+'h']( cur );
					break;
				}
			}
		}

		return this['p'+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~''))+'h'+((!{}+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k']( matched[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] > 1 ? jQuery[(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'q'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))]( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0]['p'+(![]+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] ) ? this[(!{}+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))]().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~''))+'y']( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~''))+'y'](
			// If it receives a jQuery object, the first element is used
			elem[(''+{}).charAt((-~-~[]-~''))+'q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'y'] ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this['p'+([][+[]]+'').charAt((-''))+(![]+'').charAt((-~-~[]-~''))+'h'+((!{}+[]).charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k'](
			jQuery[([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'q'+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))](
				jQuery['m'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))]( this['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))](), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this[(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( selector == null ?
			this['p'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-''))] : this['p'+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))][(!{}+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))](selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] !== 1 );

	return cur;
}

jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']({
	parent: function( elem ) {
		var parent = elem['p'+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))];
		return parent && parent[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~''))]( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))]( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~''))]( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~''))]( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery[([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-~[]))]( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery[([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~''))]( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+'g']( ( elem['p'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] || {} )[(!!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))], elem );
	},
	children: function( elem ) {
		return jQuery[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+'g']( elem[(![]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))] );
	},
	contents: function( elem ) {
		return jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]( elem, "iframe" ) ?
			elem[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))] || elem[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+'W'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w'][([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))] :
			jQuery['m'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))]( [], elem[(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))] );
	}
}, function( name, fn ) {
	jQuery[(!{}+[]).charAt((-''))+(''[+[]]+'').charAt((-~[]))][ name ] = function( until, selector ) {
		var ret = jQuery['m'+(!{}+[]).charAt((-~''))+'p']( this, fn, until );

		if ( name[(!{}+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery[(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))]( selector, ret );
		}

		if ( this[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery[([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))]( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))]( name ) ) {
				ret = ret[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]();
			}
		}

		return this['p'+([][+[]]+'').charAt((+''))+(![]+[]).charAt((-~-~[]-~[]))+'h'+((!{}+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k']( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']( options['m'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery[((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k'+(![]+[]).charAt((-~-~''-~''))] = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))]( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options[(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options['m'+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+'y'] && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ][(!!''+[]).charAt((-~''))+'pp'+(![]+[]).charAt((-~-~[]))+'y']( data[ 0 ], data[ 1 ] ) === false && options[(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'p'+(''+{}).charAt(((-~-~''<<-~-~'')))+(''[+[]]+'').charAt((-~[]))+((!!''+[]).charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))] ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'] ) {
						fire( stack[(!{}+'').charAt((-~-~''-~[]))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((+''))+(!''+'').charAt((-''))]() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];
					(function add( args ) {
						jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']( args, function( _, arg ) {
							var type = jQuery[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))]( arg );
							if ( type === "function" ) {
								if ( !options[(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'q'+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))] || !self['h'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))]( arg ) ) {
									list['p'+([][+[]]+'').charAt((+''))+(!!''+[]).charAt((-~-~[]-~''))+'h']( arg );
								}
							} else if ( arg && arg[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list[(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h'];
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(!{}+'').charAt((-~''))+'y']( arg, list, index ) ) > -1 ) {
							list[(!{}+[]).charAt((-~-~''-~''))+'p'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~''))+'y']( fn, list ) > -1 : !!( list && list[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))]();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args[(!!''+[]).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))] ? args[(!{}+[]).charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~''))]() : args ];
					if ( firing ) {
						stack['p'+([][+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~''))+'h']( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self[(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'W'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+[]))+'h']( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery[((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+(!{}+[]).charAt((-~-~''-~[]))]("once memory"), "resolved" ],
				[ "reject", "fail", jQuery[((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+(!{}+'').charAt((-~-~''-~''))]("once memory"), "rejected" ],
				[ "notify", "progress", jQuery[((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'+(!{}+[]).charAt((-~-~''-~[]))]("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery[(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))](function( newDefer ) {
						jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']( tuples, function( i, tuple ) {
							var fn = jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~''))+((!!''+[]).charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))]( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn[(!!''+[]).charAt((-~''))+'pp'+(!{}+[]).charAt((-~-~''))+'y']( this, arguments );
								if ( returned && jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~''))+((![]+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))]( returned['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'m'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] ) ) {
									returned['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()
										.done( newDefer[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))] )
										.fail( newDefer[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+''))] )
										.progress( newDefer[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-[]))+'y'] );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise['p'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'p'+([][+[]]+'').charAt((-~-~''-~''))] = promise[(!''+'').charAt((-[]))+'h'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))];

		// Add list-specific methods
		jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list[(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))];

			// Handle state
			if ( stateString ) {
				list[(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))](function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ][([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))], tuples[ 2 ][ 2 ][(![]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'] );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list[(![]+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'W'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-''))+'h'];
		});

		// Make the deferred a promise
		promise['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( deferred );

		// Call given func if any
		if ( func ) {
			func[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]))]( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))]( arguments ),
			length = resolveValues[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'],

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''-~[]))+((![]+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( subordinate['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'m'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))] ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery[(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''))](),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] > 1 ? slice[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~''))]( arguments ) : value;
					if ( values === progressValues ) {
						deferred[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((+[]))+'yW'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-[]))+'h']( contexts, values );

					} else if ( !(--remaining) ) {
						deferred[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-[]))+'h']( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]-~''))+((![]+'').charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( resolveValues[ i ]['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] ) ) {
					resolveValues[ i ]['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+''))] )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-''))+'h']( resolveContexts, resolveValues );
		}

		return deferred['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'m'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery[(!!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~''))][(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'] = function( fn ) {
	// Add the callback
	jQuery[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y']['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]().done( fn );

	return this;
};

jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))]({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'yW'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+''))]++;
		} else {
			jQuery[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'y']( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'yW'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-''))] : jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'y'] ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document[(''+{}).charAt((-~-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'] ) {
			return setTimeout( jQuery[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'] );
		}

		// Remember that the DOM is ready
		jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~''))+((!''+'').charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'y'] = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'yW'+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-[]))] > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-[]))+'h']( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery[(![]+'').charAt((-''))+([][+[]]+'').charAt((-~''))][(!''+'').charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'gg'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] ) {
			jQuery( document )[(!''+'').charAt((-[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'gg'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))]("ready")[(''+{}).charAt((-~''))+(![]+[]).charAt((+''))+(![]+'').charAt((-''))]("ready");
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document[(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))] ) {
		document[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))]( "DOMContentLoaded", completed, false );
		window[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))]( "load", completed, false );

	} else {
		document[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( "onreadystatechange", completed );
		window[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))]( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document[(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+((![]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))] || event[(!''+'').charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === "load" || document[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'y'+((![]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))] === "complete" ) {
		detach();
		jQuery[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y']();
	}
}

jQuery[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y']['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'m'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery[(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))]();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'y'+((![]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))] === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+'y'] );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document[(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+((![]+[]).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))] ) {
			// Use the handy event callback
			document[(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))]( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window[(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!{}+[]).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))]( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document[(!!''+[]).charAt((-~''))+(!''+'').charAt((+''))+(!''+'').charAt((+''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))]( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window[(!{}+[]).charAt((-~[]))+(!''+'').charAt((-''))+(!''+[]).charAt((-[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))]( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window[(!{}+[]).charAt((-[]))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))] == null && document[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))];
			} catch(e) {}

			if ( top && top[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+((![]+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~[]))] ) {
				(function doScrollCheck() {
					if ( !jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~''))+((!''+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+'y'] ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+((!!''+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))]("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y']();
					}
				})();
			}
		}
	}
	return readyList['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~[]))+((![]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))] = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+(+{}+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~''-~[]))+((!!''+[]).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~[]))+'y'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((-''))] = false;

jQuery(function() {
	// We need to execute this one support test ASAP because we need to know
	// if body.style.zoom needs to be set.

	var container, div,
		body = document['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+[]))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]("body")[0];

	if ( !body ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	container = document[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))]( "div" );
	container[(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))+'y'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))+((!''+[]).charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+[]))] = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

	div = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))]( "div" );
	body[(![]+'').charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( container ).appendChild( div );

	if ( typeof div[(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))]['z'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'m'] !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div[(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-[]))] = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1";

		if ( (support[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'+(+{}+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''-~[]))+((![]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~''))+'y'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((+[]))] = ( div[(''+{}).charAt((-~''))+(!!''+[]).charAt((-''))+(!{}+[]).charAt((-''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+'h'] === 3 )) ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body[(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+'y'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))]['z'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'m'] = 1;
		}
	}

	body[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( container );

	// Null elements to avoid leaks in IE
	container = div = null;
});




(function() {
	var div = document[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))]( "div" );

	// Execute the test only if not already executed in another module.
	if (support[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'xp'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] == null) {
		// Support: IE<9
		support[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'xp'+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))] = true;
		try {
			delete div[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))];
		} catch( e ) {
			support[([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'xp'+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~[]))] = function( elem ) {
	var noData = jQuery[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~[]))][ (elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] + " ")[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]() ],
		nodeType = +elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-''))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))]("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === 1 ) {

		var name = "data-" + key[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( rmultiDash, "-$1" ).toLowerCase();

		data = elem['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((!!''+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))]( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace[(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))]( data ) ? jQuery['p'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+((''+{}).charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt(((-~-~[]<<-~-~'')))+(+{}+'').charAt((+''))]( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery[([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~[]))]( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'mp'+(!''+[]).charAt((+''))+'y'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+''))]( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery[(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(!''+'').charAt((-''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~[]))]( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery[([][+[]]+'').charAt((-~-~''-~''))+'xp'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))],

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))],

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~''-~''))] : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id][([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+(![]+[]).charAt((-~[]))])) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds['p'+(''+{}).charAt((-~''))+'p']() || jQuery['g'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]))]++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'p'] };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( cache[ id ], name );
		} else {
			cache[ id ][(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+'').charAt((+''))+(![]+[]).charAt((-~''))] = jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))]( cache[ id ][(''[+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~''))], name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache[(''[+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~[]))] ) {
			thisCache[(''[+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~''))] = {};
		}

		thisCache = thisCache[([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~[]))];
	}

	if ( data !== undefined ) {
		thisCache[ jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery[(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'p'+(!''+[]).charAt((+[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~''))+(!''+[]).charAt((-[]))+(![]+'').charAt((-~''))]( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))],

		// See jQuery.data for more information
		cache = isNode ? jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(''[+[]]+'').charAt((-~-~''-~[]))] : elem,
		id = isNode ? elem[ jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))] ] : jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))];

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ][([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~''))];

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~''))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~''))+'y']( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name[(!{}+'').charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+''))](" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~''))+(!''+'').charAt((+''))]( jQuery['m'+(![]+[]).charAt((-~''))+'p']( name, jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))] ) );
			}

			i = name[(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-''))+'h'];
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'mp'+(!''+'').charAt((+[]))+'y'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-[]))](thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ][([][+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(!!''+[]).charAt((-~[]))];

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+(![]+'').charAt((-~[]))]( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'xp'+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] || cache != cache['w'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w'] ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery[([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] ? jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'+([][+[]]+'').charAt((-~-~[]-~''))][ elem[jQuery[([][+[]]+'').charAt((-~-~''-~''))+'xp'+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))]] ] : elem[ jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery[(![]+[]).charAt((-[]))+(''[+[]]+'').charAt((-~[]))][([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem[(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(!''+'').charAt((+''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]-~[]))];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'] ) {
				data = jQuery[([][+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~[]))]( elem );

				if ( elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 && !jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!''+'').charAt((-''))+(!{}+'').charAt((-~[]))]( elem, "parsedAttrs" ) ) {
					i = attrs[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'];
					while ( i-- ) {
						name = attrs[i][([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))];

						if ( name[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(''+{}).charAt(((-~-~''<<-~-~'')))+(![]+[]).charAt((+[]))]("data-") === 0 ) {
							name = jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( name[(!{}+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))](5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(![]+'').charAt((-~[]))]( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this[(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'](function() {
				jQuery[([][+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!''+'').charAt((+''))+(!{}+[]).charAt((-~''))]( this, key );
			});
		}

		return arguments[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] > 1 ?

			// Sets one value
			this[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'](function() {
				jQuery[([][+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~''))]( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery[(''[+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))]( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'](function() {
			jQuery[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~''))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~[]))]( this, key );
		});
	}
});


jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(!{}+'').charAt((-~''))]( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''-~''))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~''))+'y'](data) ) {
					queue = jQuery['_'+([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))]( elem, type, jQuery['m'+(!{}+'').charAt((-~[]))+'k'+([][+[]]+'').charAt((-~-~''-~[]))+((![]+[]).charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~''))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~''))+'y'](data) );
				} else {
					queue['p'+([][+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~''))+'h']( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery['q'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( elem, type ),
			startLength = queue[(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'],
			fn = queue[(!!''+[]).charAt((-~-~[]-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((+[]))+(!''+[]).charAt((+[]))](),
			hooks = jQuery['_q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~[]-~''))]( elem, type ),
			next = function() {
				jQuery[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'q'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))]( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue[(!{}+'').charAt((-~-~[]-~''))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-''))+(!''+[]).charAt((+[]))]();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue[(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((+''))+(!''+'').charAt((+''))]( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks[(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'p'];
			fn[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))]( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks[(''[+[]]+'').charAt((-~-~''-~''))+'mp'+(!''+[]).charAt((+''))+'y'][(!{}+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+''))+(!{}+'').charAt((-~''))]( elem, key ) || jQuery['_'+([][+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+'').charAt((-~[]))]( elem, key, {
			empty: jQuery[((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'+(![]+'').charAt((-~-~''-~[]))]("once memory").add(function() {
				jQuery['_'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(!!''+[]).charAt((-~''))]( elem, type + "queue" );
				jQuery['_'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))]( elem, key );
			})
		});
	}
});

jQuery[(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~[]))][(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] < setter ) {
			return jQuery['q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))]( this[0], type );
		}

		return data === undefined ?
			this :
			this[([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'](function() {
				var queue = jQuery['q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))]( this, type, data );

				// ensure a hooks for this queue
				jQuery['_q'+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~''-~''))]( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))]( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this[(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'](function() {
			jQuery[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'q'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))]( this, type );
		});
	},
	clearQueue: function( type ) {
		return this['q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery[(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))](),
			elements = this,
			i = this[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'],
			resolve = function() {
				if ( !( --count ) ) {
					defer[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+'h']( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+(!{}+'').charAt((-~''))]( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp[(''[+[]]+'').charAt((-~-~[]-~''))+'mp'+(!''+'').charAt((+''))+'y'] ) {
				count++;
				tmp[([][+[]]+'').charAt((-~-~[]-~[]))+'mp'+(!''+[]).charAt((+[]))+'y'][(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( resolve );
			}
		}
		resolve();
		return defer['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'m'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/)[(!!''+[]).charAt((-~-~[]-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))];

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))]( elem, "display" ) === "none" || !jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))]( elem[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))], elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery[(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))] = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems[(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((-''))+'h'],
		bulk = key == null;

	// Sets many values
	if ( jQuery[(!''+[]).charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))]( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery[(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))]( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~-~''-~''))+((![]+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))]( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))]( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))+(![]+'').charAt((-~-~[]))]( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))]( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''))]( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+((!!''+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~[]))+'gm'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))](),
		div = document[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))]("div"),
		input = document[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]("input");

	// Setup
	div[(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((+[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))]( "className", "t" );
	div[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'H'+((!''+[]).charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'M'+((![]+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()] = "  <link/><table></table><a href='/a'>a</a>";

	// IE strips leading whitespace when .innerHTML is used
	support[(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+'gWh'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~''))] = div[(!{}+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))][(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support[(!''+'').charAt((-[]))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+'y'] = !div['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(![]+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))]( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support['h'+(!''+'').charAt((+''))+'m'+(![]+'').charAt((-~-~[]))+((!!''+[]).charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'z'+(''[+[]]+'').charAt((-~-~''-~[]))] = !!div['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(![]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+((!''+'').charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+'g'+(+{}+'').charAt((+[]))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support['h'+(!''+'').charAt((+[]))+'m'+(![]+'').charAt((-~-~''))+(((-~-~[]<<-~[])+-~''))+''+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] =
		document[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input[(!''+'').charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] = "checkbox";
	input[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))] = true;
	fragment[(![]+'').charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( input );
	support[(![]+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] = input[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))];

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'M'+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()] = "<textarea>x</textarea>";
	support[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] = !!div[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))]( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment[(!{}+[]).charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( div );
	div[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'H'+((!''+'').charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'M'+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()] = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] = div[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))] = true;
	if ( div[(!!''+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] ) {
		div[(!{}+'').charAt((-~''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]( "onclick", function() {
			support[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))] = false;
		});

		div[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'xp'+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))] == null) {
		// Support: IE<9
		support[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'xp'+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))] = true;
		try {
			delete div[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))];
		} catch( e ) {
			support[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'xp'+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))] = false;
		}
	}

	// Null elements to avoid leaks in IE.
	fragment = div = input = null;
})();


(function() {
	var i, eventName,
		div = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))]( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div[(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((+''))+(!''+[]).charAt((-[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( eventName, "t" );
			support[ i + "Bubbles" ] = div[(!{}+'').charAt((-~[]))+(!''+'').charAt((-''))+(!''+'').charAt((-''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~''))][ eventName ][([][+[]]+'').charAt((-~-~[]-~''))+'xp'+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document[(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))];
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery['_'+([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!''+'').charAt((-[]))+(![]+'').charAt((-~''))]( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler['h'+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] ) {
			handleObjIn = handler;
			handler = handleObjIn['h'+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))];
			selector = handleObjIn[(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))];
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler['g'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))] ) {
			handler['g'+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]))] = jQuery['g'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]))]++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData[([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~-~[]-~''))]) ) {
			events = elemData[(''[+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(!{}+'').charAt((-~-~[]-~''))] = {};
		}
		if ( !(eventHandle = elemData['h'+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))]) ) {
			eventHandle = elemData['h'+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))] = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))][(!''+'').charAt((-''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'gg'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))] !== e[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))]) ?
					jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))][(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~''))+(!''+'').charAt((+[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'][(!{}+[]).charAt((-~[]))+'pp'+(![]+[]).charAt((-~-~''))+'y']( eventHandle[(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'], arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle[(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'] = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" )['m'+(![]+'').charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']( rnotwhite ) || [ "" ];
		t = types[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];
		while ( t-- ) {
			tmp = rtypenamespace[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))]( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" )[(!{}+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))]( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(!!''+[]).charAt((-~-~[]-~''))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))][ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'g'+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] : special[(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((!''+'').charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ) || type;

			// Update special based on newly reset type
			special = jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(![]+[]).charAt((-~-~''-~''))+'p'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''))][ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler['g'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''))],
				selector: selector,
				needsContext: selector && jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!''+[]).charAt((-~''))]['m'+(![]+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'][(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+[]))][(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))]( selector ),
				namespace: namespaces[(''+{}).charAt((-~-~''-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))](".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'g'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))] = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special[(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-[]))+'p'] || special[(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((+[]))+'p'][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~-~[]))]( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem[(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((!{}+[]).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))] ) {
						elem[(!{}+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((![]+[]).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))]( type, eventHandle, false );

					} else if ( elem[(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))] ) {
						elem[(!!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(!''+[]).charAt((-''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))]( "on" + type, eventHandle );
					}
				}
			}

			if ( special[(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))] ) {
				special[(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( elem, handleObj );

				if ( !handleObj['h'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))]['g'+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''))] ) {
					handleObj['h'+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))]['g'+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]))] = handler['g'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''))];
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers[(![]+'').charAt((-~-~[]-~''))+'p'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( handlers[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'g'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))]++, 0, handleObj );
			} else {
				handlers['p'+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~[]-~[]))+'h']( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))]['g'+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))][ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery['h'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))]( elem ) && jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~[]))]( elem );

		if ( !elemData || !(events = elemData[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(![]+'').charAt((-~-~[]-~''))]) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" )['m'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']( rnotwhite ) || [ "" ];
		t = types[(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'];
		while ( t-- ) {
			tmp = rtypenamespace[([][+[]]+'').charAt((-~-~''-~[]))+'x'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))]( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" )[(![]+'').charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((+[]))]( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))][(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))]( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))][(![]+[]).charAt((-~-~[]-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]))][ type ] || {};
			type = ( selector ? special[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'g'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] : special[(''+{}).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces[(''+{}).charAt((-~-~[]-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))]("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'];
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj[(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'g'+((!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] ) &&
					( !handler || handler['g'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))] === handleObj['g'+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]))] ) &&
					( !tmp || tmp[(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))]( handleObj[(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~''))] ) ) &&
					( !selector || selector === handleObj[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))] || selector === "**" && handleObj[(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))] ) ) {
					handlers[(!!''+[]).charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( j, 1 );

					if ( handleObj[(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))] ) {
						handlers[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'g'+(![]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))]--;
					}
					if ( special[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))] ) {
						special[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~''))]( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] ) {
				if ( !special[(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~[]))] || special[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]( elem, namespaces, elemData['h'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))] ) === false ) {
					jQuery[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))]( elem, type, elemData['h'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'mp'+(!''+'').charAt((-''))+'y'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))]( events ) ) {
			delete elemData['h'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))];

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery['_'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~[]))]( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))]( event, "type" ) ? event[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] : event,
			namespaces = hasOwn[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(![]+[]).charAt((-~-~[]))]( event, "namespace" ) ? event[([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))][(!{}+'').charAt((-~-~''-~''))+'p'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-[]))](".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] === 3 || elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph[(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))]( type + jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))][(!''+[]).charAt((-[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))] ) ) {
			return;
		}

		if ( type[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~''<<-~-~[])))+(![]+'').charAt((-''))](".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type[(!{}+'').charAt((-~-~[]-~[]))+'p'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-''))](".");
			type = namespaces[(!{}+[]).charAt((-~-~''-~''))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((+[]))+(!''+[]).charAt((+[]))]();
			namespaces[(!{}+[]).charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))]();
		}
		ontype = type[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!!''+[]).charAt((-''))](":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+'xp'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))] ] ?
			event :
			new jQuery[(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))]( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''-~''))+((!''+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'gg'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))] = onlyHandlers ? 2 : 3;
		event[(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+'p'+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))] = namespaces[(''+{}).charAt((-~-~''-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))](".");
		event[([][+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'_'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))] = event[(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))] ?
			new RegExp( "(^|\\.)" + namespaces[(''+{}).charAt((-~-~''-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))]("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((+[]))+(!{}+'').charAt((-~-~[]))+(!''+'').charAt((+''))] = undefined;
		if ( !event[(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))] ) {
			event[(!''+[]).charAt((-''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))] = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery['m'+(![]+[]).charAt((-~[]))+'k'+(''[+[]]+'').charAt((-~-~[]-~''))+((!{}+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~''))+'y']( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))][(![]+[]).charAt((-~-~''-~[]))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]))][ type ] || {};
		if ( !onlyHandlers && special[(!''+'').charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'gg'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] && special[(!''+[]).charAt((+[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'gg'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))][(!{}+'').charAt((-~[]))+'pp'+(!{}+[]).charAt((-~-~''))+'y']( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-''))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))] && !jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w']( elem ) ) {

			bubbleType = special[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'g'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] || type;
			if ( !rfocusMorph[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))]( bubbleType + type ) ) {
				cur = cur['p'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))];
			}
			for ( ; cur; cur = cur['p'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
				eventPath['p'+(''[+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~''-~[]))+'h']( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))] || document) ) {
				eventPath['p'+([][+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''-~[]))+'h']( tmp[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-''))+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((+''))+(!!''+[]).charAt((-~-~''))+(!''+'').charAt((+''))+'V'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'w'] || tmp['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w'] || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''-~[]))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'+(![]+[]).charAt((-~''))+'g'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+((![]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))]() ) {

			event[(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] = i > 1 ?
				bubbleType :
				special[(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((!''+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] || type;

			// jQuery handler
			handle = ( jQuery['_'+([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(![]+'').charAt((-~[]))]( cur, "events" ) || {} )[ event[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] ] && jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))]( cur, "handle" );
			if ( handle ) {
				handle[(!{}+[]).charAt((-~''))+'pp'+(!{}+'').charAt((-~-~''))+'y']( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle[(!{}+[]).charAt((-~[]))+'pp'+(!{}+[]).charAt((-~-~''))+'y'] && jQuery[(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!''+[]).charAt((-''))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+(!''+'').charAt((+[]))+(![]+'').charAt((-~''))]( cur ) ) {
				event[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~[]))+(!''+[]).charAt((-''))] = handle[(!{}+'').charAt((-~[]))+'pp'+(!{}+'').charAt((-~-~[]))+'y']( cur, data );
				if ( event[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((+[]))] === false ) {
					event['p'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-''))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((-''))]();
				}
			}
		}
		event[(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+''))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((+''))+'P'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))]() ) {

			if ( (!special['_'+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((+''))+(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~''))+(!''+'').charAt((+''))] || special['_'+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((+[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((+''))][(!{}+[]).charAt((-~[]))+'pp'+(![]+[]).charAt((-~-~''))+'y']( eventPath['p'+(''+{}).charAt((-~''))+'p'](), data ) === false) &&
				jQuery[(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(!''+[]).charAt((-[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~[]))]( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+'w']( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))][(!''+'').charAt((+[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'gg'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''))] = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))][(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]))+(!''+'').charAt((+''))];
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(!{}+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'x']( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]( arguments ),
			handlers = ( jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~''))]( this, "events" ) || {} )[ event[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] ] || [],
			special = jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(!{}+'').charAt((-~-~''-~[]))+'p'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''))][ event[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'g'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))] = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special['p'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+'p'+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'] && special['p'+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+'p'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''))]( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]['h'+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))]( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~''-~''))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'+(!{}+[]).charAt((-~''))+'g'+(![]+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+((![]+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))]() ) {
			event[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))] = matched[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'];

			j = 0;
			while ( (handleObj = matched['h'+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))][ j++ ]) && !event[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'mm'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+'P'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'p'+(![]+'').charAt((-~''))+'g'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+((![]+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))]() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event[([][+[]]+'').charAt((-~[]))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'_'+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))] || event[([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+'p'+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'_'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))][(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+''))]( handleObj[(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))] ) ) {

					event['h'+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~''))] = handleObj;
					event[(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+(!{}+[]).charAt((-~''))] = handleObj[(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~''))];

					ret = ( (jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(!!''+[]).charAt((-~-~[]-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))][ handleObj[(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'g'+((!''+[]).charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] ] || {})['h'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))] || handleObj['h'+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] )
							[(!{}+[]).charAt((-~[]))+'pp'+(!!''+[]).charAt((-~-~[]))+'y']( matched[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'], args );

					if ( ret !== undefined ) {
						if ( (event[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-[]))+(![]+'').charAt((-~-~''))+(!''+'').charAt((-''))] = ret) === false ) {
							event['p'+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((+''))+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((+''))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((+''))]();
							event[(![]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'pP'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+(![]+'').charAt((-~''))+'g'+(!{}+[]).charAt((-~''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special['p'+(''+{}).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]-~''))+'p'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'] ) {
			special['p'+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~[]))+'p'+(!{}+'').charAt((-~''))+(!''+'').charAt((+''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'][(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))]( this, event );
		}

		return event[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~[]))+(!''+'').charAt((-[]))];
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'g'+(!{}+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))],
			cur = event[(!''+[]).charAt((+[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))];

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] && (!event[(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))] || event[(!''+'').charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur['p'+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 && (cur[([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))] !== true || event[(!''+'').charAt((-[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj[(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))] + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj[(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~-~''-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))] ?
								jQuery( sel, this )[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x']( cur ) >= 0 :
								jQuery[(!{}+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches['p'+([][+[]]+'').charAt((+''))+(![]+'').charAt((-~-~''-~[]))+'h']( handleObj );
						}
					}
					if ( matches[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] ) {
						handlerQueue['p'+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~[]-~''))+'h']({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'] ) {
			handlerQueue['p'+(''[+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~''-~[]))+'h']({ elem: this, handlers: handlers[(!{}+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'xp'+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))],
			originalEvent = event,
			fixHook = this[(!{}+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'xH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(![]+[]).charAt((-~-~[]-~[]))][ type ];

		if ( !fixHook ) {
			this[(!!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'xH'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~''-~''))][ type ] = fixHook =
				rmouseEvent[(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))]( type ) ? this['m'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~''-~''))] :
				rkeyEvent[(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]( type ) ? this['k'+([][+[]]+'').charAt((-~-~[]-~[]))+'yH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(![]+[]).charAt((-~-~[]-~[]))] :
				{};
		}
		copy = fixHook['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'p'+(!{}+[]).charAt((-~-~[]-~[]))] ? this['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+(![]+'').charAt((-~-~[]-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))]( fixHook['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'+(!{}+'').charAt((-~-~''-~''))] ) : this['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+(![]+[]).charAt((-~-~''-~[]))];

		event = new jQuery[((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( originalEvent );

		i = copy[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'];
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event[(!''+'').charAt((+''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))] ) {
			event[(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))] = originalEvent[(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))] || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event[(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))][(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 3 ) {
			event[(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))] = event[(!''+'').charAt((+[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]['p'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))];
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event['m'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+(![]+'').charAt((-~[]))+'K'+(''[+[]]+'').charAt((-~-~''-~[]))+'y'] = !!event['m'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'K'+([][+[]]+'').charAt((-~-~[]-~[]))+'y'];

		return fixHook[(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))] ? fixHook[(![]+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))]( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which"[(![]+[]).charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-[]))](" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode"[(![]+'').charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((+''))](" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event['wh'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'] == null ) {
				event['wh'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'] = original[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] != null ? original[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(![]+'').charAt((-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] : original['k'+(''[+[]]+'').charAt((-~-~[]-~''))+'y'+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))];
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement"[(![]+'').charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-[]))](" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original[(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((+''))+(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))],
				fromElement = original[(![]+'').charAt((-''))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'m'+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))];

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event['p'+(!{}+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~''-~''))+'X'] == null && original[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+'X'] != null ) {
				eventDoc = event[(!''+'').charAt((-''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))][(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))] || document;
				doc = eventDoc[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))];
				body = eventDoc[(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'y'];

				event['p'+(![]+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+'X'] = original[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+'X'] + ( doc && doc[(![]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((+[]))+(!''+'').charAt((-''))] || body && body[(!!''+[]).charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(![]+'').charAt((-~-~[]))+(![]+[]).charAt((-~-~''))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((+[]))+(!''+[]).charAt((+[]))] || 0 ) - ( doc && doc[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((![]+[]).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((+[]))+(!''+[]).charAt((-''))] || body && body[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+((![]+[]).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+''))+(!''+'').charAt((+[]))] || 0 );
				event['p'+(![]+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~[]-~''))+'Y'] = original[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+'Y'] + ( doc && doc[(![]+[]).charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+((!''+[]).charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'p']  || body && body[(!!''+[]).charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+((!''+[]).charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'p']  || 0 ) - ( doc && doc[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'p']  || body && body[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'p']  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))+((!''+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))] && fromElement ) {
				event[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))] = fromElement === event[(!''+[]).charAt((+''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))] ? original[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))] : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event['wh'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'] && button !== undefined ) {
				event['wh'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'] = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this[(![]+[]).charAt((+''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~''-~[]))] ) {
					try {
						this[(![]+[]).charAt((+''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((+''))+(![]+[]).charAt((-~-~[]-~[]))]();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this[(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((-~''))] ) {
					this[(''+{}).charAt((-~-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-~[]))]();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( this, "input" ) && this[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === "checkbox" && this[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'k'] ) {
					this[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k']();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))]( event[(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))], "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((+[]))] !== undefined ) {
					event[(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'g'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+'V'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))] = event[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~''))+(!''+'').charAt((+''))];
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))](
			new jQuery[((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))](),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))][(!''+'').charAt((-[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'gg'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))]( e, null, elem );
		} else {
			jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))][(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( elem, e );
		}
		if ( e[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((+''))+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((+''))+'P'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))]() ) {
			event['p'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-''))+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((+[]))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((+[]))]();
		}
	}
};

jQuery[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))] = document[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+((!{}+[]).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))] ?
	function( elem, type, handle ) {
		if ( elem[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+((!{}+[]).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))] ) {
			elem[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+((![]+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))]( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))] ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]( name, handle );
		}
	};

jQuery[(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))] = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery[((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))]) ) {
		return new jQuery[(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))]( src, props );
	}

	// Event object
	if ( src && src[(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] ) {
		this[(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'g'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))] = src;
		this[(!''+'').charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] = src[(!''+'').charAt((-[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))];

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+[]))+(![]+[]).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~[]))+(!''+[]).charAt((+''))+'P'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''))] = src[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~''))+(!''+[]).charAt((-[]))+'P'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))] ||
				src[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((+''))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(!{}+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+'P'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))] === undefined && (
				// Support: IE < 9
				src[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+'V'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))] === false ||
				// Support: Android < 4.0
				src['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+'P'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]))+(!''+[]).charAt((+''))] && src['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+'P'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-[]))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-''))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((+[]))]() ) ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~''))] = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this[(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+((!!''+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~[]))+'mp'] = src && src[(!''+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+((!!''+[]).charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+[]))+(![]+[]).charAt((-~''))+'mp'] || jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'w']();

	// Mark it as fixed
	this[ jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))] ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery[(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this[(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'g'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))];

		this[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-[]))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((+''))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((-''))+'P'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))] = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e['p'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((+[]))+(!{}+'').charAt((-~-~[]))+(!''+[]).charAt((+[]))] ) {
			e['p'+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-[]))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((+[]))]();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+'V'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))] = false;
		}
	},
	stopPropagation: function() {
		var e = this[(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'g'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))];

		this[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+'P'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'p'+(![]+'').charAt((-~[]))+'g'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+((!!''+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e[(!{}+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'pP'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+(!{}+'').charAt((-~''))+'g'+(![]+[]).charAt((-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))] ) {
			e[(![]+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'pP'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'p'+(!{}+'').charAt((-~[]))+'g'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-[]))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] = true;
	},
	stopImmediatePropagation: function() {
		this[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''-~[]))+(([][+[]]+'').charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'mm'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~[]))+'g'+(![]+'').charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+((![]+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))] = returnTrue;
		this[(!!''+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'pP'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+(!{}+[]).charAt((-~[]))+'g'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))]();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery[([][+[]]+'').charAt((-~-~''-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))][(![]+[]).charAt((-~-~''-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]))][ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))+((!''+[]).charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))],
				handleObj = event['h'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~-~'')))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~''-~''))];

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))]( target, related )) ) {
				event[(!''+'').charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] = handleObj[(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'g'+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))];
				ret = handleObj['h'+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))][(![]+'').charAt((-~''))+'pp'+(!!''+[]).charAt((-~-~[]))+'y']( this, arguments );
				event[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support[(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((+''))+(''+{}).charAt((-~-~[]))+'m'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))] ) {

	jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))][(!!''+[]).charAt((-~-~[]-~[]))+'p'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''))][(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((+''))+(''+{}).charAt((-~-~''))+'m'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-''))] = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))]( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))][(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e[(!''+[]).charAt((-''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))],
					form = jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]( elem, "input" ) || jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( elem, "button" ) ? elem[(!{}+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((-~[]))+'m'] : undefined;
				if ( form && !jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+'').charAt((-''))+(!!''+[]).charAt((-~[]))]( form, "submitBubbles" ) ) {
					jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))]( form, "submit._submit", function( event ) {
						event['_'+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((+''))+(''+{}).charAt((-~-~[]))+'m'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-[]))+'_'+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] = true;
					});
					jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))]( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event['_'+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-[]))+(''+{}).charAt((-~-~[]))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))+'_'+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
				delete event['_'+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((+[]))+(''+{}).charAt((-~-~[]))+'m'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+'_'+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))];
				if ( this['p'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] && !event[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))] ) {
					jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+(''[+[]]+'').charAt((-[]))+(![]+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))]( "submit", this['p'+(![]+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))], event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))][(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))]( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))] ) {

	jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))][(!{}+[]).charAt((-~-~[]-~''))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]))][(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~[]-~''))] = {

		setup: function() {

			if ( rformElems[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-''))]( this[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))] ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this[(!''+'').charAt((-[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === "checkbox" || this[(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === "radio" ) {
					jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))][(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( this, "propertychange._change", function( event ) {
						if ( event[(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'g'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))]['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-[]))+'y'+(+{}+'').charAt((+''))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] === "checked" ) {
							this['_'+(''+{}).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+'_'+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))] = true;
						}
					});
					jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( this, "click._change", function( event ) {
						if ( this['_'+(''+{}).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+'_'+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))] && !event[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] ) {
							this['_'+(''+{}).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+'_'+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))] = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))][(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m'+(''[+[]]+'').charAt((+''))+(!!''+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery[([][+[]]+'').charAt((-~-~''-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( this, "beforeactivate._change", function( e ) {
				var elem = e[(!''+'').charAt((+''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))];

				if ( rformElems[(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(!{}+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] ) && !jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))]( elem, "changeBubbles" ) ) {
					jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))][(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( elem, "change._change", function( event ) {
						if ( this['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] && !event[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+((!{}+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'m'+(''[+[]]+'').charAt((-[]))+(![]+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))] && !event[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~[]))+((!''+[]).charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'gg'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))] ) {
							jQuery[([][+[]]+'').charAt((-~-~''-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))][(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'m'+(''[+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]( "change", this['p'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))], event, true );
						}
					});
					jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+'').charAt((+[]))+(!{}+[]).charAt((-~''))]( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event[(!''+[]).charAt((-''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))];

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+((!{}+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m'+(''[+[]]+'').charAt((-''))+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''))] || event[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))] || (elem[(!''+'').charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] !== "radio" && elem[(!''+[]).charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] !== "checkbox") ) {
				return event['h'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]-~''))]['h'+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))][(!!''+[]).charAt((-~[]))+'pp'+(![]+[]).charAt((-~-~''))+'y']( this, arguments );
			}
		},

		teardown: function() {
			jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))][(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))]( this, "._change" );

			return !rformElems[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))]( this[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support[(!{}+'').charAt((+''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~''))] ) {
	jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))][(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m'+([][+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))]( fix, event[(!''+[]).charAt((-''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))], jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))][(!{}+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'x']( event ), true );
			};

		jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(![]+[]).charAt((-~-~''-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''))][ fix ] = {
			setup: function() {
				var doc = this[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))] || this,
					attaches = jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~[]))]( doc, fix );

				if ( !attaches ) {
					doc[(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'v'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!{}+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))]( orig, handler, true );
				}
				jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~''))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~''))]( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))] || this,
					attaches = jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(![]+[]).charAt((-~[]))]( doc, fix ) - 1;

				if ( !attaches ) {
					doc[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'v'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))]( orig, handler, true );
					jQuery['_'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~''))]( doc, fix );
				} else {
					jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~''))]( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery[(!!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~''))][([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))]({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this[(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery()[(''+{}).charAt((-~''))+(![]+[]).charAt((+[]))+(!{}+'').charAt((-[]))]( event );
				return origFn[(![]+'').charAt((-~[]))+'pp'+(!!''+[]).charAt((-~-~''))+'y']( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn['g'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''))] = origFn['g'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''))] || ( origFn['g'+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]))] = jQuery['g'+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))]++ );
		}
		return this[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']( function() {
			jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))][(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types['p'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+[]))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''))+(!''+'').charAt((+''))] && types['h'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~[]))] ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types['h'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~''-~''))];
			jQuery( types[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'g'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))] )[(''+{}).charAt((-~''))+(!!''+[]).charAt((-[]))+(!!''+[]).charAt((-''))](
				handleObj[(''[+[]]+'').charAt((-~''))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] ? handleObj[(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'g'+((!''+[]).charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] + "." + handleObj[(''[+[]]+'').charAt((-~''))+(!!''+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))] : handleObj[(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'g'+((!''+'').charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))],
				handleObj[(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))],
				handleObj['h'+(![]+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))]
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this[(''+{}).charAt((-~[]))+(![]+'').charAt((-[]))+(!{}+'').charAt((-''))]( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'](function() {
			jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))][(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))]( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this[([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'](function() {
			jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))][(!''+'').charAt((-''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'gg'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))]( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))][(!''+[]).charAt((-''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'gg'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))]( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames[(!!''+[]).charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))]( "|" ),
		safeFrag = document[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((!!''+[]).charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~''))+(!{}+'').charAt((-~[]))+'gm'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]();

	if ( safeFrag[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))] ) {
		while ( list[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] ) {
			safeFrag[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))](
				list['p'+(''+{}).charAt((-~[]))+'p']()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support['h'+(!''+'').charAt((+[]))+'m'+(!{}+[]).charAt((-~-~''))+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'z'+([][+[]]+'').charAt((-~-~[]-~[]))] ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment[(!{}+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))]( document[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))]("div") );

wrapMap[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((+[]))+'g'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-''))+'p'] = wrapMap[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))];
wrapMap[(!''+'').charAt((-''))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'y'] = wrapMap[(!''+[]).charAt((-[]))+(!{}+[]).charAt((+''))+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+(!''+'').charAt((+''))] = wrapMap[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~[]))+'g'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((+''))+'p'] = wrapMap[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~[]))+'p'+(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))] = wrapMap[(!''+[]).charAt((-[]))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))];
wrapMap[(!''+[]).charAt((-[]))+'h'] = wrapMap[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]))];

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'y'+((!''+[]).charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+'g'+(+{}+'').charAt((-''))+(!{}+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] !== strundefined ? context['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+'g'+(+{}+'').charAt((-''))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( tag || "*" ) :
			typeof context['q'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'y'+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+((!!''+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))] !== strundefined ? context['q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'y'+((![]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+((!!''+[]).charAt((-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~[]))]( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))] || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+''))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))]( elem, tag ) ) {
				found['p'+(''[+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~[]-~[]))+'h']( elem );
			} else {
				jQuery['m'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~[]-~[]))]( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( context, tag ) ?
		jQuery['m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))]( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType[(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-''))]( elem[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] ) ) {
		elem[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((+''))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))] = elem[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))];
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+(![]+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( elem, "table" ) &&
		jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( content[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] !== 11 ? content : content[(![]+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))], "tr" ) ?

		elem['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(!{}+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~[]))+'g'+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]("tbody")[0] ||
			elem[(![]+[]).charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))]( elem[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))][(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))]("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem[(!''+[]).charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] = (jQuery[(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))][(![]+[]).charAt((-~''))+(!''+[]).charAt((+''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~[]))]( elem, "type" ) !== null) + "/" + elem[(!''+[]).charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))];
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( elem[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] );
	if ( match ) {
		elem[(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] = match[1];
	} else {
		elem[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-[]))+(!''+'').charAt((-''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))]("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~[]))]( elem, "globalEval", !refElements || jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~[]))]( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] !== 1 || !jQuery['h'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~[]))]( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+[]))+(!{}+[]).charAt((-~[]))]( src ),
		curData = jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~[]))]( dest, oldData ),
		events = oldData[([][+[]]+'').charAt((-~-~''-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(!!''+[]).charAt((-~-~[]-~''))];

	if ( events ) {
		delete curData['h'+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))];
		curData[([][+[]]+'').charAt((-~-~[]-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~''))] = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ][(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h']; i < l; i++ ) {
				jQuery[([][+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData[([][+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~''))] ) {
		curData[([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+''))+(!{}+'').charAt((-~[]))] = jQuery[([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]( {}, curData[(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(!{}+[]).charAt((-~[]))] );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] !== 1 ) {
		return;
	}

	nodeName = dest[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))][(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))] && dest[ jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))] ] ) {
		data = jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~''))]( dest );

		for ( e in data[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(!{}+'').charAt((-~-~''-~[]))] ) {
			jQuery[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( dest, e, data['h'+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))] );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((![]+[]).charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-''))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))]( jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'xp'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))] );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+''))] !== src[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+[]))] ) {
		disableScript( dest )[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))] = src[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((-[]))];
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest['p'+(![]+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))] ) {
			dest[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'M'+((![]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()] = src[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'H'+((!''+'').charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+'').charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()];
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support['h'+(!''+[]).charAt((-[]))+'m'+(!{}+'').charAt((-~-~[]))+(((-~-~''<<-~'')+-~''))+''+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))] && ( src[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'H'+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'M'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()] && !jQuery[(!''+[]).charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'](dest[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'H'+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()]) ) ) {
			dest[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'H'+((!''+'').charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()] = src[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'M'+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()];
		}

	} else if ( nodeName === "input" && rcheckableType[(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))]( src[(!''+[]).charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((+''))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))] = dest[(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))] = src[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))];

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest['v'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] !== src['v'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
			dest['v'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))] = src['v'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))];
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest[([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((+[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((+[]))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((-''))+((!{}+[]).charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))] = dest[(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''))] = src[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((+[]))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((-[]))+((!{}+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))];

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(![]+[]).charAt((-~-~''))+(!''+[]).charAt((-[]))+'V'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))] = src[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((+[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-[]))+(!{}+[]).charAt((-~-~[]))+(!''+'').charAt((-[]))+'V'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))];
	}
}

jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))]({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))]( elem[(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))], elem );

		if ( support['h'+(!''+'').charAt((+''))+'m'+(!{}+'').charAt((-~-~''))+(((-~-~''<<-~[])+-~[]))+''+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))] || jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~''))+'XM'+((!{}+[]).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))](elem) || !rnoshimcache[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))]( "<" + elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] + ">" ) ) {
			clone = elem[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))]( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'H'+((!''+'').charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'M'+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()] = elem[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'H'+((!''+'').charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'M'+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()];
			fragmentDiv[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( clone = fragmentDiv[(!!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))] );
		}

		if ( (!support[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))] || !support[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))]) &&
				(elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 1 || elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 11) && !jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~''))+'XM'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))](elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+''))+'h'] > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'],

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery[(!''+[]).charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))]( elem ) === "object" ) {
					jQuery['m'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~[]-~''))]( nodes, elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( elem ) ) {
					nodes['p'+([][+[]]+'').charAt((+[]))+(![]+'').charAt((-~-~[]-~[]))+'h']( context[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe[(![]+[]).charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( context[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))]("div") );

					// Deserialize a standard representation
					tag = (rtagName[([][+[]]+'').charAt((-~-~''-~''))+'x'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( elem ) || [ "", "" ])[ 1 ][(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]();
					wrap = wrapMap[ tag ] || wrapMap['_'+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((+''))+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''))+(!''+[]).charAt((-[]))];

					tmp[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'H'+((!''+[]).charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'M'+((![]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()] = wrap[1] + elem[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp[(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))];
					}

					// Manually add leading whitespace removed by IE
					if ( !support[(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+'gWh'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+'p'+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~''))] && rleadingWhitespace[(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-''))]( elem ) ) {
						nodes['p'+([][+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~[]-~[]))+'h']( context[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+''))+(+{}+'').charAt((-''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( rleadingWhitespace[(''[+[]]+'').charAt((-~-~''-~''))+'x'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))]( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support[(!''+[]).charAt((+[]))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'y'] ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody[(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+''))]( elem ) ?
							tmp[(![]+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))] :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]( elem ) ?
								tmp :
								0;

						j = elem && elem[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))][(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'];
						while ( j-- ) {
							if ( jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))]( (tbody = elem[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))][j]), "tbody" ) && !tbody[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))][(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'] ) {
								elem[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( tbody );
							}
						}
					}

					jQuery['m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))]( nodes, tmp[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~[]))] );

					// Fix #12392 for WebKit and IE > 9
					tmp[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))] = "";

					// Fix #12392 for oldIE
					while ( tmp[(!!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))] ) {
						tmp[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( tmp[(!{}+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))] );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe[(![]+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))];
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support[(![]+'').charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))] ) {
			jQuery['g'+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'p']( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+((![]+[]).charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+(![]+[]).charAt((-~''))+'y']( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))]( elem[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))], elem );

			// Append to fragment
			tmp = getAll( safe[(!!''+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))]( elem[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] || "" ) ) {
						scripts['p'+(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]-~''))+'h']( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))],
			cache = jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'+(''[+[]]+'').charAt((-~-~''-~[]))],
			deleteExpando = support[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'xp'+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))],
			special = jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))][(![]+[]).charAt((-~-~''-~''))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))];

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery[(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!''+[]).charAt((+[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~[]))]( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data[([][+[]]+'').charAt((-~-~''-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~-~''-~''))] ) {
						for ( type in data[(''[+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(![]+'').charAt((-~-~''-~''))] ) {
							if ( special[ type ] ) {
								jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))][(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))]( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]( elem, type, data['h'+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))] );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-[]))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))] !== strundefined ) {
							elem[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((+[]))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))]( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds['p'+([][+[]]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~''))+'h']( id );
					}
				}
			}
		}
	}
});

jQuery[(![]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))][([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))]({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))]( this ) :
				this[([][+[]]+'').charAt((-~-~''-~''))+'mp'+(!''+[]).charAt((-[]))+'y']().append( ( this[0] && this[0][(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] || document )[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( value ) );
		}, null, value, arguments[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'] );
	},

	append: function() {
		return this[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'mM'+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'p']( arguments, function( elem ) {
			if ( this[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 1 || this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 11 || this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 9 ) {
				var target = manipulationTarget( this, elem );
				target[(!{}+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( elem );
			}
		});
	},

	prepend: function() {
		return this[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'mM'+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'p']( arguments, function( elem ) {
			if ( this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === 1 || this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 11 || this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 9 ) {
				var target = manipulationTarget( this, elem );
				target[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( elem, target[(![]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))] );
			}
		});
	},

	before: function() {
		return this[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'mM'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'p']( arguments, function( elem ) {
			if ( this['p'+(![]+'').charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
				this['p'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))][(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((+[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( elem, this );
			}
		});
	},

	after: function() {
		return this[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+'mM'+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'p']( arguments, function( elem ) {
			if ( this['p'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))] ) {
				this['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((+''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( elem, this[(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))+((!!''+[]).charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+'g'] );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery[(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))]( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 1 ) {
				jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~''))]( getAll( elem ) );
			}

			if ( elem['p'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
				if ( keepData && jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))]( elem[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))], elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem['p'+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))][(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 ) {
				jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+([][+[]]+'').charAt((-~''))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~''))]( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem[(!{}+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))] ) {
				elem[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( elem[(!{}+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))] );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))] && jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( elem, "select" ) ) {
				elem[(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))][(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+[]))+'h'] = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this['m'+(!{}+[]).charAt((-~''))+'p'](function() {
			return jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h'];

			if ( value === undefined ) {
				return elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 1 ?
					elem[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'H'+((!''+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'M'+((![]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()][(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]( value ) &&
				( support['h'+(!''+[]).charAt((+''))+'m'+(!!''+[]).charAt((-~-~[]))+((![]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'z'+(''[+[]]+'').charAt((-~-~''-~[]))] || !rnoshimcache[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))]( value )  ) &&
				( support[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+'gWh'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))+'p'+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))] || !rleadingWhitespace[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-[]))]( value ) ) &&
				!wrapMap[ (rtagName[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))]( value ) || [ "", "" ])[ 1 ][(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]() ] ) {

				value = value[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'p'+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''-~''))]( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 1 ) {
							jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))]( getAll( elem, false ) );
							elem[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'M'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()] = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this[(''[+[]]+'').charAt((-~-~''-~[]))+'mp'+(!''+'').charAt((+[]))+'y']().append( value );
			}
		}, null, value, arguments[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+'mM'+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'p']( arguments, function( elem ) {
			arg = this['p'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))];

			jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~[]))]( getAll( this ) );

			if ( arg ) {
				arg[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'] || arg[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))]) ? this : this[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))]();
	},

	detach: function( selector ) {
		return this[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))]( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat[(![]+[]).charAt((-~[]))+'pp'+(![]+'').charAt((-~-~[]))+'y']( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'],
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+((!{}+[]).charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k'+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))] && rchecked[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))]( value ) ) ) {
			return this[(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'](function( index ) {
				var self = set[(''[+[]]+'').charAt((-~-~''-~[]))+'q']( index );
				if ( isFunction ) {
					args[0] = value[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( this, index, self['h'+(!''+'').charAt((-''))+'m'+(![]+[]).charAt((-~-~[]))]() );
				}
				self[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'mM'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'p']( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery[(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+((!!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~[]))+'gm'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))]( args, this[ 0 ][(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))], false, this );
			first = fragment[(![]+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))];

			if ( fragment[(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))][(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'] === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery['m'+(!{}+[]).charAt((-~[]))+'p']( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'];

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))]( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery['m'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~''))]( scripts, getAll( node, "script" ) );
						}
					}

					callback[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~''))]( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'] - 1 ][(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))];

					// Reenable scripts
					jQuery['m'+(!{}+'').charAt((-~''))+'p']( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))]( node[(!''+[]).charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] || "" ) &&
							!jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~''))+(!''+'').charAt((+''))+(!{}+[]).charAt((-~''))]( node, "globalEval" ) && jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))]( doc, node ) ) {

							if ( node[(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))] ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery['_'+([][+[]]+'').charAt((-~-~''-~''))+'v'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]))+((''[+[]]+'').charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))] ) {
									jQuery['_'+([][+[]]+'').charAt((-~-~''-~''))+'v'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+(([][+[]]+'').charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]))]( node[(!!''+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))] );
								}
							} else {
								jQuery['g'+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'v'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''))]( ( node[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+[]))] || node[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))] || node[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'H'+((!''+'').charAt((-'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'M'+((![]+[]).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()] || "" )[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h']({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery[(!{}+'').charAt((+[]))+([][+[]]+'').charAt((-~''))][ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'] - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))](true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push[(![]+'').charAt((-~[]))+'pp'+(!{}+'').charAt((-~-~[]))+'y']( ret, elems['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))]() );
		}

		return this['p'+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~[]))+'h'+((!!''+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k']( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( name ) )[(![]+[]).charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((!''+'').charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))]( doc[(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'] ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]))+(!''+'').charAt((+[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'mp'+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))+((!{}+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			window['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'mp'+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''))+((![]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+'y'+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]( elem[ 0 ] ).display : jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]-~[]))]( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h']();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ))[(!{}+'').charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))]( doc[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+'w'] || iframe[ 0 ][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))] )[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))];

			// Support: IE
			doc['w'+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]();
			doc[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]();

			display = actualDisplay( nodeName, doc );
			iframe[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var a, shrinkWrapBlocksVal,
		div = document[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))]( "div" ),
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'H'+((!''+'').charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()] = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))]( "a" )[ 0 ];

	a[(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+'y'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-''))] = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support[(''+{}).charAt((-~''))+'p'+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-''))+'y'] = /^0.5/[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))]( a[(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+'y'] );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+((!!''+[]).charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((+[]))] = !!a[(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]-~''))+((!!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))];

	div[(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+'y'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))][(''+{}).charAt((-~-~''))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'kg'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'p'] = "content-box";
	div[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( true ).style.backgroundClip = "";
	support[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] = div[(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+'y'+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))][(''+{}).charAt((-~-~''))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'kg'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'p'] === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	support[(!{}+[]).charAt((-~-~''-~[]))+'h'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+'kW'+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~[]))+'p'+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'+(![]+[]).charAt((-~-~''-~''))] = function() {
		var body, container, div, containerStyles;

		if ( shrinkWrapBlocksVal == null ) {
			body = document['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+[]).charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( "body" )[ 0 ];
			if ( !body ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px";
			container = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))]( "div" );
			div = document[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))]( "div" );

			body[(!{}+[]).charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))]( container ).appendChild( div );

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			if ( typeof div[(!!''+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+'y'+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))]['z'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'m'] !== strundefined ) {
				// Support: IE6
				// Check if elements with layout shrink-wrap their children
				div[(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'y'+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+((!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+''))] = divReset + ";width:1px;padding:1px;zoom:1";
				div[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'H'+((!''+'').charAt((+[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'M'+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()] = "<div></div>";
				div[(![]+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))][(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]['w'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+'h'] = "5px";
				shrinkWrapBlocksVal = div[(''+{}).charAt((-~''))+(![]+'').charAt((-''))+(![]+[]).charAt((-''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]))+(!''+[]).charAt((-''))+'h'] !== 3;
			}

			body[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( container );

			// Null elements to avoid leaks in IE.
			body = container = div = null;
		}

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'mp'+([][+[]]+'').charAt((+''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))+((!!''+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+[]))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] ) {
	getStyles = function( elem ) {
		return elem[(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))][([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-[]))+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-''))+(![]+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+'V'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'w']['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'mp'+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((+[]))+'y'+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))]( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem[(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+'y'+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))];

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+'P'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((+''))+'yV'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))]( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))]( elem[(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))], elem ) ) {
				ret = jQuery[(!{}+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+'y'+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((+''))]( ret ) && rmargin[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))]( name ) ) {

				// Remember the original values
				width = style['w'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!''+'').charAt((-[]))+'h'];
				minWidth = style['m'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''))+(!''+[]).charAt((+''))+'h'];
				maxWidth = style['m'+(!!''+[]).charAt((-~[]))+'xW'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''))+(!''+[]).charAt((+[]))+'h'];

				// Put in the new values to get a computed value out
				style['m'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!''+'').charAt((-''))+'h'] = style['m'+(!{}+'').charAt((-~''))+'xW'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))+(!''+[]).charAt((-[]))+'h'] = style['w'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''))+(!''+[]).charAt((+''))+'h'] = ret;
				ret = computed['w'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''))+(!''+'').charAt((+[]))+'h'];

				// Revert the changed values
				style['w'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''))+(!''+'').charAt((+[]))+'h'] = width;
				style['m'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+'W'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''))+(!''+'').charAt((-[]))+'h'] = minWidth;
				style['m'+(!{}+'').charAt((-~''))+'xW'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''))+(!''+[]).charAt((+[]))+'h'] = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+((!!''+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] ) {
	getStyles = function( elem ) {
		return elem[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+((![]+[]).charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((+[]))+'y'+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))];
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+'y'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))];

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( ret ) && !rposition[(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))]( name ) ) {

			// Remember the original values
			left = style[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-''))+(!''+[]).charAt((-''))];
			rs = elem[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+((!{}+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-''))+'y'+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))];
			rsLeft = rs && rs[(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+''))+(!''+[]).charAt((+[]))];

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-[]))+(!''+[]).charAt((+[]))] = elem[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+((![]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((+[]))+(!''+[]).charAt((-''))];
			}
			style[(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((+[]))+(!''+'').charAt((-[]))] = name === "fontSize" ? "1em" : ret;
			ret = style['p'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'x'+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-''))+(!''+[]).charAt((+''))] + "px";

			// Revert the changed values
			style[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((+[]))+(!''+'').charAt((+[]))] = left;
			if ( rsLeft ) {
				rs[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-[]))+(!''+[]).charAt((+''))] = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))];
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))] = hookFn)[(!!''+[]).charAt((-~''))+'pp'+(!{}+[]).charAt((-~-~''))+'y']( this, arguments );
		}
	};
}


(function() {
	var a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal,
		pixelPositionVal, reliableMarginRightVal,
		div = document[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))]( "div" ),
		containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px",
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'H'+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+[]).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()] = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(!{}+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'y'+((!''+[]).charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~[]))+'g'+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))]( "a" )[ 0 ];

	a[(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-''))+'y'+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+[]))] = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support[(''+{}).charAt((-~''))+'p'+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-''))+'y'] = /^0.5/[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-[]))]( a[(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt((-~''))+'p'+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))+'y'] );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]-~''))+((!{}+[]).charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(![]+[]).charAt((-~''))+(!''+[]).charAt((+[]))] = !!a[(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-''))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))+((!!''+[]).charAt((-'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+(![]+'').charAt((-~''))+(!''+'').charAt((-[]))];

	div[(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+'y'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'kg'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'p'] = "content-box";
	div[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( true ).style.backgroundClip = "";
	support[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+((![]+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-''))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))] = div[(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'y'+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'kg'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'p'] === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))](support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal != null ) {
				return reliableHiddenOffsetsVal;
			}

			var container, tds, isSupported,
				div = document[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))]( "div" ),
				body = document['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+'').charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( "body" )[ 0 ];

			if ( !body ) {
				// Return for frameset docs that don't have a body
				return;
			}

			// Setup
			div[(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((![]+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+''))+(!''+'').charAt((-''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))]( "className", "t" );
			div[([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'H'+((!''+'').charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()] = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

			container = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]( "div" );
			container[(![]+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+''))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-''))] = containerStyles;

			body[(!{}+'').charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))]( container ).appendChild( div );

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'M'+((!{}+[]).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()] = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'y'+((!''+[]).charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( "td" );
			tds[ 0 ][(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+'y'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~[]))+((!''+'').charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+''))] = "padding:0;margin:0;border:0;display:none";
			isSupported = ( tds[ 0 ][(''+{}).charAt((-~''))+(!{}+[]).charAt((+''))+(!!''+[]).charAt((+[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'gh'+(!''+'').charAt((-''))] === 0 );

			tds[ 0 ][(![]+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))][(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+'y'] = "";
			tds[ 1 ][(![]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+'y'+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+'y'] = "none";

			// Support: IE8
			// Check if empty table cells still have offsetWidth/Height
			reliableHiddenOffsetsVal = isSupported && ( tds[ 0 ][(''+{}).charAt((-~[]))+(![]+'').charAt((+''))+(![]+'').charAt((-''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+'H'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'gh'+(!''+[]).charAt((+[]))] === 0 );

			body[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( container );

			// Null elements to avoid leaks in IE.
			div = body = null;

			return reliableHiddenOffsetsVal;
		},

		boxSizing: function() {
			if ( boxSizingVal == null ) {
				computeStyleTests();
			}
			return boxSizingVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {
			var body, container, div, marginDiv;

			// Use window.getComputedStyle because jsdom on node.js will break without it.
			if ( reliableMarginRightVal == null && window['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'mp'+(''[+[]]+'').charAt((+[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))+((!{}+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((+[]))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
				body = document['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(!{}+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+'g'+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))]( "body" )[ 0 ];
				if ( !body ) {
					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				container = document[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))]( "div" );
				div = document[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-''))]( "div" );
				container[(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+''))] = containerStyles;

				body[(!{}+'').charAt((-~''))+'pp'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( container ).appendChild( div );

				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// Fails in WebKit before Feb 2011 nightlies
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				marginDiv = div[(![]+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))]( document[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]( "div" ) );
				marginDiv[(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((+[]))+'y'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-[]))] = div[(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+'y'+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+''))] = divReset;
				marginDiv[(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]['m'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+'g'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+((!''+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'gh'+(!''+[]).charAt((-''))] = marginDiv[(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]['w'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''))+(!''+[]).charAt((+''))+'h'] = "0";
				div[(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]['w'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]))+(!''+'').charAt((+[]))+'h'] = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'mp'+([][+[]]+'').charAt((-''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))+((!{}+[]).charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-''))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]( marginDiv, null ) || {} )['m'+(![]+'').charAt((-~''))+(!''+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+((!''+[]).charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'gh'+(!''+[]).charAt((+[]))] );

				body[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( container );
			}

			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		var container, div,
			body = document['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~-~[]-~''))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'y'+((!''+[]).charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~''))+'g'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))]( "body" )[ 0 ];

		if ( !body ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		container = document[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))]( "div" );
		div = document[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))]( "div" );
		container[(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((-''))] = containerStyles;

		body[(!{}+'').charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))]( container ).appendChild( div );

		div[(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))] =
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:absolute;display:block;padding:1px;border:1px;width:4px;" +
				"margin-top:1%;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery[(!{}+[]).charAt((-~-~[]-~''))+'w'+(![]+[]).charAt((-~[]))+'p']( body, body[(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))]['z'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'m'] != null ? { zoom: 1 } : {}, function() {
			boxSizingVal = div[(''+{}).charAt((-~''))+(![]+'').charAt((-[]))+(![]+[]).charAt((+[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]))+(!''+'').charAt((-''))+'h'] === 4;
		});

		// Will be changed later if needed.
		boxSizingReliableVal = true;
		pixelPositionVal = false;
		reliableMarginRightVal = true;

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'mp'+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]))+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((+''))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] ) {
			pixelPositionVal = ( window['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+'mp'+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))+((![]+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( div, null ) || {} )[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'p'] !== "1%";
			boxSizingReliableVal =
				( window['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'mp'+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))+((!!''+[]).charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( div, null ) || { width: "4px" } )['w'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+'h'] === "4px";
		}

		body[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( container );

		// Null elements to avoid leaks in IE.
		div = body = null;
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery[(!!''+[]).charAt((-~-~''-~''))+'w'+(!{}+'').charAt((-~''))+'p'] = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem[(!{}+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))][ name ];
		elem[(![]+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][ name ] = options[ name ];
	}

	ret = callback[(!!''+[]).charAt((-~''))+'pp'+(!{}+[]).charAt((-~-~''))+'y']( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem[(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+'y'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))][ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+((![]+[]).charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-''))](0).toUpperCase() + name[(![]+[]).charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))](1),
		origName = name,
		i = cssPrefixes[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'];

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements[(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'];

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem[(![]+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))] ) {
			continue;
		}

		values[ index ] = jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))]( elem, "olddisplay" );
		display = elem[(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))][([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~[]))+(![]+[]).charAt((-~''))+'y'];
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem[(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))][([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~''))+'p'+(![]+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+'y'] = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem[(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))][([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~''-~''))+'p'+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+'y'] === "" && isHidden( elem ) ) {
				values[ index ] = jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~[]))]( elem, "olddisplay", defaultDisplay(elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))]) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(!!''+[]).charAt((-~[]))]( elem, "olddisplay", hidden ? display : jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''-~[]))]( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem[(!{}+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] ) {
			continue;
		}
		if ( !show || elem[(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))+'y'+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))][(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+'y'] === "none" || elem[(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-''))+'y'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))][(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(![]+[]).charAt((-~-~''))+(!{}+'').charAt((-~''))+'y'] === "" ) {
			elem[(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))][([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+'y'] = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit[(''[+[]]+'').charAt((-~-~''-~''))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math['m'+(![]+'').charAt((-~[]))+'x']( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~[]))]( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))]( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~''))]( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~[]))]( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~''))]( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem[(''+{}).charAt((-~[]))+(![]+'').charAt((+''))+(![]+'').charAt((-[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]))+(!''+'').charAt((-''))+'h'] : elem[(''+{}).charAt((-~''))+(!!''+[]).charAt((+[]))+(![]+[]).charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'gh'+(!''+'').charAt((-''))],
		styles = getStyles( elem ),
		isBorderBox = support[(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~[]))+'x'+((![]+[]).charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'z'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+'g']() && jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))]( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem[(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((+[]))+'y'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))][ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx[(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))](val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support[(''+{}).charAt((-~-~''))+(''+{}).charAt((-~''))+'x'+((!!''+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'z'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+'g'+((!''+'').charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]() || val === elem[(!{}+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))][ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+((![]+'').charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-[]))] ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] === 3 || elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === 8 || !elem[(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+'y'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))] ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( name ),
			style = elem[(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))];

		name = jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''-~[]))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~-~''-~''))][ origName ] || ( jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))+'P'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~-~[]-~''))][ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~''-~''))][ name ] || jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~''-~[]))][ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~[]))]( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+([][+[]]+'').charAt((+[]))+'m'+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))][ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((+[]))+'y'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))] && value === "" && name[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!{}+'').charAt((+[]))]("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks[(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))]( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					// Support: Chrome, Safari
					// Setting style to blank string required to delete "style: x !important;"
					style[ name ] = "";
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))]( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( name );

		// Make sure that we're working with the right name
		name = jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~[]))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'+(!!''+[]).charAt((-~-~[]-~[]))][ origName ] || ( jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))+'P'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+(!!''+[]).charAt((-~-~''-~''))][ origName ] = vendorPropName( elem[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))], origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!!''+[]).charAt((-~-~''-~''))][ name ] || jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~[]))][ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))]( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))]( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']([ "height", "width" ], function( i, name ) {
	jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~''-~''))][ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem[(''+{}).charAt((-~[]))+(![]+[]).charAt((+''))+(!!''+[]).charAt((-[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]))+(!''+'').charAt((-[]))+'h'] === 0 && rdisplayswap[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))]( jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~''))]( elem, "display" ) ) ?
					jQuery[(!!''+[]).charAt((-~-~[]-~''))+'w'+(!!''+[]).charAt((-~''))+'p']( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support[(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+'x'+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'z'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+'g']() && jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))]( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support[(''+{}).charAt((-~[]))+'p'+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-''))+'y'] ) {
	jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!{}+'').charAt((-~-~''-~''))][(''+{}).charAt((-~''))+'p'+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-[]))+'y'] = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]( (computed && elem[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+((![]+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-''))+'y'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ? elem[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+((!{}+[]).charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((+''))+'y'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))][(![]+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))] : elem[(!{}+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+'y'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))][(!{}+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))]) || "" ) ?
				( 0.01 * parseFloat( RegExp['$'+((-~''))+''] ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem[(!{}+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))],
				currentStyle = elem[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-''))+'y'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))],
				opacity = jQuery[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+([][+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))]( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle[(![]+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))] || style[(!{}+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))] || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style['z'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'m'] = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery[(!''+'').charAt((-''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'m']( filter[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( ralpha, "" ) ) === "" &&
					style[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))] ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+((!{}+'').charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-[]))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))]( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle[(![]+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))] ) {
					return;
				}
			}

			// otherwise, set new filter values
			style[(!!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))] = ralpha[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))]( filter ) ?
				filter[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!{}+'').charAt((-~-~[]-~[]))]['m'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+'g'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+((!''+'').charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'gh'+(!''+[]).charAt((+''))] = addGetHookIf( support[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'M'+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~[]))+'g'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))+((!''+[]).charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'gh'+(!''+[]).charAt((+''))],
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery[(![]+'').charAt((-~-~[]-~''))+'w'+(![]+'').charAt((-~[]))+'p']( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~''))][ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value[(!{}+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+[]))](" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))]( prefix ) ) {
		jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+[]).charAt((-~-~''-~''))][ prefix + suffix ][(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))] = setPositiveNumber;
	}
});

jQuery[(![]+[]).charAt((-[]))+(''[+[]]+'').charAt((-~[]))][(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~[]))+((![]+'').charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~''))+'y']( name ) ) {
				styles = getStyles( elem );
				len = name[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+[]))+'h'];

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))]( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery[(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( elem, name, value ) :
				jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''-~[]))]( elem, name );
		}, name, value, arguments[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this[(![]+[]).charAt((-~-~''-~[]))+'h'+(''+{}).charAt((-~''))+'w']() : this['h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))]();
		}

		return this[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'](function() {
			if ( isHidden( this ) ) {
				jQuery( this )[(!{}+[]).charAt((-~-~''-~''))+'h'+(''+{}).charAt((-~''))+'w']();
			} else {
				jQuery( this )['h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+'').charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))][([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((+''))]( elem, options, prop, end, easing );
}
jQuery[((!''+'').charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))] = Tween;

Tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this[([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'] = elem;
		this['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'] = prop;
		this[(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+'g'] = easing || "swing";
		this[(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))] = options;
		this[(![]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((-[]))] = this[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+'w'] = this[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((+''))+(!''+[]).charAt((-~''))]();
		this[(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))] = end;
		this[(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((+[]))] = unit || ( jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+([][+[]]+'').charAt((+[]))+'m'+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))][ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~''-~''))][ this['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'] ];

		return hooks && hooks['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))] ?
			hooks['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))]( this ) :
			Tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'pH'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+[]).charAt((-~-~[]-~''))]['_'+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-''))+(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''))+(!''+[]).charAt((+''))]['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))]( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~''))][ this['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'] ];

		if ( this[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))][([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))] ) {
			this['p'+(''+{}).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))] = eased = jQuery[([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+'g'][ this[(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+'g'] ](
				percent, this[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))][(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-[]))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))] * percent, 0, 1, this[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))][([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-~''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]
			);
		} else {
			this['p'+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))] = eased = percent;
		}
		this[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'w'] = ( this[([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))] - this[(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~''))+(!''+[]).charAt((+[]))] ) * eased + this[(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!''+'').charAt((+[]))];

		if ( this[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))][(![]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+'p'] ) {
			this[(''+{}).charAt((-~[]))+'p'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))][(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+'p'][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))]( this[([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'], this[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+'w'], this );
		}

		if ( hooks && hooks[(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))] ) {
			hooks[(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))]( this );
		} else {
			Tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~[]-~[]))]['_'+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((+''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((-[]))][(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( this );
		}
		return this;
	}
};

Tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))][([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))]['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] = Tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~''))];

Tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~[]))] = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'][ tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'p'] ] != null &&
				(!tween[(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m'][(![]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))] || tween[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'][(!{}+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+'y'+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))][ tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'p'] ] == null) ) {
				return tween[(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'][ tween['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'] ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))]( tween[([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'], tween['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'], "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery[(![]+'').charAt((-''))+'x'][(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+'p'][ tween['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'p'] ] ) {
				jQuery[(![]+[]).charAt((-''))+'x'][(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+'p'][ tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'p'] ]( tween );
			} else if ( tween[(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'][(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] && ( tween[([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'][(!{}+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+'y'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))][ jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~[]))+'P'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~-~''-~[]))][ tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'p'] ] ] != null || jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~[]-~''))][ tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'] ] ) ) {
				jQuery[(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))+'y'+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( tween[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'], tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'], tween[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+'w'] + tween[(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-[]))] );
			} else {
				tween[([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'][ tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'p'] ] = tween[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+'w'];
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(!{}+'').charAt((-~-~[]-~''))][(![]+[]).charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'p'] = Tween['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'pH'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+[]).charAt((-~-~[]-~[]))][(![]+[]).charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~-~''))+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((+[]))+(!''+[]).charAt((-[]))] = {
	set: function( tween ) {
		if ( tween[(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'][(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] && tween[(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'m']['p'+(![]+'').charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
			tween[([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'][ tween['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'] ] = tween[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'w'];
		}
	}
};

jQuery[([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+'g'] = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))]( p * Math['P'+((''[+[]]+'').charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()] ) / 2;
	}
};

jQuery[(!{}+'').charAt((+''))+'x'] = Tween['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))][([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-[]))];

// Back Compat <1.8 extension point
jQuery[(![]+'').charAt((-[]))+'x'][(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+'p'] = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))]( prop, value ),
				target = tween[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((-~''))](),
				parts = rfxnum[([][+[]]+'').charAt((-~-~''-~[]))+'x'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))]( value ),
				unit = parts && parts[ 3 ] || ( jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~''))+(+{}+'').charAt((+''))+([][+[]]+'').charAt((-''))+'m'+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))][ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+([][+[]]+'').charAt((+''))+'m'+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))][ prop ] || unit !== "px" && +target ) &&
					rfxnum[(''[+[]]+'').charAt((-~-~[]-~''))+'x'+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))]( jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))]( tween[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'], prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+'y'+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( tween[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'], prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((+[]))+(!''+'').charAt((-~[]))]() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween[(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))] = +start || +target || 0;
				tween[([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((+[]))] = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween[(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))] = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+'w']() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs[(''+{}).charAt((-~[]))+'p'+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+''))+'y'] = attrs['w'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!''+[]).charAt((+''))+'h'] = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] )[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-''))]( tweeners[ "*" ] ),
		index = 0,
		length = collection[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'];
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~[]))]( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, dDisplay,
		anim = this,
		orig = {},
		style = elem[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))],
		hidden = elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] && isHidden( elem ),
		dataShow = jQuery['_'+([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~[]))]( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts['q'+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
		hooks = jQuery['_q'+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(![]+[]).charAt((-~-~[]-~''))]( elem, "fx" );
		if ( hooks[(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+'q'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] == null ) {
			hooks[(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))+'q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))] = 0;
			oldfire = hooks[([][+[]]+'').charAt((-~-~[]-~''))+'mp'+(!''+[]).charAt((-''))+'y'][(!{}+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))];
			hooks[([][+[]]+'').charAt((-~-~[]-~[]))+'mp'+(!''+[]).charAt((+''))+'y'][(!{}+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] = function() {
				if ( !hooks[(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~[]))+'q'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] ) {
					oldfire();
				}
			};
		}
		hooks[([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~''))+'q'+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))]++;

		anim[(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+'w'+(!{}+[]).charAt((-~[]))+'y'+(![]+[]).charAt((-~-~''-~''))](function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim[(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+'w'+(!{}+[]).charAt((-~''))+'y'+(![]+'').charAt((-~-~[]-~''))](function() {
				hooks[([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+'q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))]--;
				if ( !jQuery['q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))]( elem, "fx" ).length ) {
					hooks[([][+[]]+'').charAt((-~-~[]-~''))+'mp'+(!''+[]).charAt((+[]))+'y'][(!{}+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts[(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((+''))+(!{}+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w'] = [ style[(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((+''))+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+'w'], style[(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!{}+'').charAt((+''))+(![]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'wX'], style[(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(![]+'').charAt((+''))+(![]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'wY'] ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))]( elem, "display" );
		dDisplay = defaultDisplay( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] );
		if ( display === "none" ) {
			display = dDisplay;
		}
		if ( display === "inline" &&
				jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]-~[]))]( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k'+(+{}+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]-~''))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~[]))+'y'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-''))] || dDisplay === "inline" ) {
				style[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~''))+'y'] = "inline-block";
			} else {
				style['z'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'m'] = 1;
			}
		}
	}

	if ( opts[(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-''))+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+'w'] ) {
		style[(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+(!{}+'').charAt((+[]))+(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+'w'] = "hidden";
		if ( !support[(!{}+[]).charAt((-~-~[]-~[]))+'h'+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+'kW'+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~''))+'p'+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'k'+(!{}+'').charAt((-~-~''-~[]))]() ) {
			anim[(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+'w'+(!!''+[]).charAt((-~''))+'y'+(![]+[]).charAt((-~-~''-~''))](function() {
				style[(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((+[]))+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+'w'] = opts[(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+'w'][ 0 ];
				style[(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-''))+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+'wX'] = opts[(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((+''))+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+'w'][ 1 ];
				style[(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((+[]))+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+'wY'] = opts[(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(![]+'').charAt((+''))+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+'w'][ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))]( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery[(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+'y'+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( elem, prop );
		}
	}

	if ( !jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'mp'+(!''+[]).charAt((-[]))+'y'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))]( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow['h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))];
			}
		} else {
			dataShow = jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~[]))]( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow['h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))] = !hidden;
		}
		if ( hidden ) {
			jQuery( elem )[(!{}+'').charAt((-~-~[]-~''))+'h'+(''+{}).charAt((-~[]))+'w']();
		} else {
			anim[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))](function() {
				jQuery( elem )['h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]();
			});
		}
		anim[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))](function() {
			var prop;
			jQuery['_'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(![]+'').charAt((-~''))]( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery[(!{}+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))+'y'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween[(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+''))];
				if ( hidden ) {
					tween[(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))] = tween[(![]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((+''))];
					tween[(!{}+[]).charAt((-~-~''-~[]))+(!''+'').charAt((+''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!''+'').charAt((+''))] = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~[]))+((![]+[]).charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~''))+'y']( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~''-~[]))][ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters[(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'],
		deferred = jQuery[(([][+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))]().always( function() {
			// don't match elem in the :animated selector
			delete tick[([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'];
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math['m'+(!!''+[]).charAt((-~''))+'x']( 0, animation[(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+(!''+[]).charAt((+''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] + animation[([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))] - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))] || 0,
				percent = 1 - temp,
				index = 0,
				length = animation[(!''+'').charAt((-[]))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))][(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'];

			for ( ; index < length ; index++ ) {
				animation[(!''+[]).charAt((+[]))+'w'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))][ index ][(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))]( percent );
			}

			deferred[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-''))+'yW'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((+''))+'h']( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-[]))+'h']( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'m'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]({
			elem: elem,
			props: jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]( {}, properties ),
			opts: jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))],
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery[((!''+'').charAt((-'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'w'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))]( elem, animation[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~-~''-~[]))], prop, end,
						animation[(''+{}).charAt((-~[]))+'p'+(!''+[]).charAt((+''))+(!{}+'').charAt((-~-~''-~''))][(![]+[]).charAt((-~-~[]-~''))+'p'+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+'g'][ prop ] || animation[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((-''))+(!!''+[]).charAt((-~-~[]-~''))][([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~''))+'g'] );
				animation[(!''+'').charAt((-''))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))]['p'+([][+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~[]-~[]))+'h']( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation[(!''+[]).charAt((-[]))+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))][(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation[(!''+[]).charAt((-''))+'w'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))][ index ][(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~''))]( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-''))+'h']( elem, [ animation, gotoEnd ] );
				} else {
					deferred[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-''))+'W'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-''))+'h']( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+(![]+[]).charAt((-~-~[]-~[]))];

	propFilter( props, animation[(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~''))][(!{}+[]).charAt((-~-~[]-~[]))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+'g'] );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''))+(![]+'').charAt((-~-~[]))]( animation, elem, props, animation[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((-''))+(!{}+[]).charAt((-~-~[]-~[]))] );
		if ( result ) {
			return result;
		}
	}

	jQuery['m'+(!!''+[]).charAt((-~''))+'p']( props, createTween, animation );

	if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~[]))+((![]+'').charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]( animation[(''+{}).charAt((-~[]))+'p'+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~-~[]-~[]))][(![]+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-[]))] ) ) {
		animation[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((-''))+(![]+[]).charAt((-~-~''-~''))][(![]+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~''))+(!''+'').charAt((-~[]))+(!''+[]).charAt((+[]))][(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))]( elem, animation );
	}

	jQuery[(!{}+'').charAt((-''))+'x'][(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))](
		jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( tick, {
			elem: elem,
			anim: animation,
			queue: animation[(''+{}).charAt((-~[]))+'p'+(!''+[]).charAt((+''))+(![]+[]).charAt((-~-~[]-~''))]['q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))]
		})
	);

	// attach callbacks from options
	return animation['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'g'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~''))]( animation[(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]-~[]))]['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'g'+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))] )
		.done( animation[(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((+[]))+(![]+'').charAt((-~-~[]-~[]))][([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))], animation[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((-''))+(!!''+[]).charAt((-~-~''-~''))][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+'mp'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))] )
		.fail( animation[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((+[]))+(!{}+'').charAt((-~-~[]-~''))][(!!''+[]).charAt((-[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~''))] )
		.always( animation[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+''))+(!{}+'').charAt((-~-~[]-~''))][(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+'w'+(![]+[]).charAt((-~''))+'y'+(![]+[]).charAt((-~-~[]-~[]))] );
}

jQuery[((!{}+'').charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'m'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))] = jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~''-~[]))+((![]+[]).charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props[(!{}+[]).charAt((-~-~''-~[]))+'p'+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))](" ");
		}

		var prop,
			index = 0,
			length = props[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'];

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ][([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-[]))+(!''+[]).charAt((+''))]( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters[(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+'h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((+[]))+(!''+[]).charAt((+''))]( callback );
		} else {
			animationPrefilters['p'+(''[+[]]+'').charAt((+[]))+(!{}+[]).charAt((-~-~''-~[]))+'h']( callback );
		}
	}
});

jQuery[(!{}+[]).charAt((-~-~''-~''))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))] = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery[([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~[]-~[]))+((!{}+[]).charAt((-[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))]( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''-~[]))+((!!''+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( easing ) && easing
	};

	opt[(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))] = jQuery[(!{}+'').charAt((+''))+'x'][(''+{}).charAt((-~''))+(!{}+'').charAt((+''))+(![]+[]).charAt((-''))] ? 0 : typeof opt[([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))] === "number" ? opt[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))] :
		opt[([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))] in jQuery[(!{}+'').charAt((-''))+'x'][(!!''+[]).charAt((-~-~[]-~''))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~''-~[]))] ? jQuery[(!{}+'').charAt((+[]))+'x'][(!{}+'').charAt((-~-~[]-~[]))+'p'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~[]-~''))][ opt[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))] ] : jQuery[(!!''+[]).charAt((-[]))+'x'][(![]+'').charAt((-~-~''-~''))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~[]-~[]))]['_'+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-[]))+(![]+'').charAt((-~-~''))+(!''+'').charAt((+[]))];

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt['q'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))] == null || opt['q'+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))] === true ) {
		opt['q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))] = "fx";
	}

	// Queueing
	opt[(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''))] = opt[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+'mp'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))];

	opt[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+'mp'+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))] = function() {
		if ( jQuery[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~''-~[]))+((![]+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( opt[(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))] ) ) {
			opt[(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~-~''))]( this );
		}

		if ( opt['q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
			jQuery[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'q'+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( this, opt['q'+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))] );
		}
	};

	return opt;
};

jQuery[(![]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))][([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this[(!{}+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))]( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'mp'+(!''+[]).charAt((+[]))+'y'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))]( prop ),
			optall = jQuery[(!{}+'').charAt((-~-~[]-~''))+'p'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))]( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery['_'+(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+(![]+[]).charAt((-~''))]( this, "finish" ) ) {
					anim[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'p']( true );
				}
			};
			doAnimation[(![]+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]-~''))+'h'] = doAnimation;

		return empty || optall['q'+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))] === false ?
			this[([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']( doAnimation ) :
			this['q'+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))]( optall['q'+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))], doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks[(![]+[]).charAt((-~-~[]-~''))+(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'p'];
			delete hooks[(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'p'];
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this['q'+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))]( type || "fx", [] );
		}

		return this[(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'](function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))],
				data = jQuery['_'+([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+[]))+(!{}+'').charAt((-~[]))]( this );

			if ( index ) {
				if ( data[ index ] && data[ index ][(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'p'] ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ][(!{}+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'p'] && rrun[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers[(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+''))+'h']; index--; ) {
				if ( timers[ index ][([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'] === this && (type == null || timers[ index ]['q'+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))] === type) ) {
					timers[ index ][(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'][(!{}+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'p']( gotoEnd );
					dequeue = false;
					timers[(!!''+[]).charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery[([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'q'+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))]( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'](function() {
			var index,
				data = jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~''))]( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery[(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))],
				length = queue ? queue[(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'] : 0;

			// enable finishing flag on private data
			data[(!!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]-~''))+'h'] = true;

			// empty the queue first
			jQuery['q'+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))]( this, type, [] );

			if ( hooks && hooks[(![]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'p'] ) {
				hooks[(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'p'][(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~-~''))]( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers[(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h']; index--; ) {
				if ( timers[ index ][(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'] === this && timers[ index ]['q'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))] === type ) {
					timers[ index ][(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'][(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'p']( true );
					timers[(!!''+[]).charAt((-~-~[]-~[]))+'p'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ][(!{}+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]-~[]))+'h'] ) {
					queue[ index ][(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+'h'][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( this );
				}
			}

			// turn off finishing flag
			delete data[(![]+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~''))+'h'];
		});
	}
});

jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery[(!{}+'').charAt((-[]))+([][+[]]+'').charAt((-~[]))][ name ];
	jQuery[(![]+[]).charAt((+[]))+([][+[]]+'').charAt((-~''))][ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn[(!!''+[]).charAt((-~[]))+'pp'+(![]+[]).charAt((-~-~''))+'y']( this, arguments ) :
			this[(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'+(!{}+'').charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery[(![]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))][ name ] = function( speed, easing, callback ) {
		return this[(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))]( props, speed, easing, callback );
	};
});

jQuery[(!''+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))] = [];
jQuery[(!{}+'').charAt((-''))+'x'][(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k'] = function() {
	var timer,
		timers = jQuery[(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))],
		i = 0;

	fxNow = jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+'w']();

	for ( ; i < timers[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h']; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers[(!!''+[]).charAt((-~-~[]-~''))+'p'+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( i--, 1 );
		}
	}

	if ( !timers[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+[]))+'h'] ) {
		jQuery[(![]+'').charAt((+[]))+'x'][(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'p']();
	}
	fxNow = undefined;
};

jQuery[(!!''+[]).charAt((+[]))+'x'][(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))] = function( timer ) {
	jQuery[(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))]['p'+([][+[]]+'').charAt((+[]))+(!{}+[]).charAt((-~-~[]-~[]))+'h']( timer );
	if ( timer() ) {
		jQuery[(![]+'').charAt((+''))+'x'][(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((+''))]();
	} else {
		jQuery[(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))]['p'+(''+{}).charAt((-~''))+'p']();
	}
};

jQuery[(!{}+'').charAt((-''))+'x'][([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'v'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''))] = 13;

jQuery[(!{}+[]).charAt((+[]))+'x'][(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((+''))] = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery[(![]+[]).charAt((+[]))+'x'][(!''+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'], jQuery[(![]+'').charAt((-[]))+'x'][(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'v'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''))] );
	}
};

jQuery[(![]+'').charAt((-''))+'x'][(![]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'p'] = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery[(!{}+[]).charAt((-[]))+'x'][(![]+[]).charAt((-~-~''-~[]))+'p'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~-~[]-~''))] = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery[(![]+[]).charAt((-[]))+([][+[]]+'').charAt((-~''))][(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''))+(!!''+[]).charAt((-~''))+'y'] = function( time, type ) {
	time = jQuery[(!!''+[]).charAt((+[]))+'x'] ? jQuery[(![]+'').charAt((-''))+'x'][(![]+'').charAt((-~-~''-~''))+'p'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~-~''-~''))][ time ] || time : time;
	type = type || "fx";

	return this['q'+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))]( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks[(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'p'] = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var a, input, select, opt,
		div = document[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))]("div" );

	// Setup
	div[(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+((![]+'').charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((+''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))]( "className", "t" );
	div[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'H'+((!''+[]).charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'M'+((![]+[]).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()] = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(!{}+[]).charAt((-~-~[]-~[]))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'y'+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+'g'+(+{}+'').charAt((+''))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]("a")[ 0 ];

	// First batch of tests.
	select = document[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]("select");
	opt = select[(!{}+'').charAt((-~[]))+'pp'+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))]( document[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))]("option") );
	input = div['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+((''[+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+(!{}+'').charAt((-~-~''-~''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'y'+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]("input")[ 0 ];

	a[(!!''+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+'y'+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~''))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+''))] = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+((!!''+[]).charAt((-~-~''-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((![]+'').charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-[]))+(!''+'').charAt((-''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))] = div[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support[(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))+'y'+(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))] = /top/[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))+(!''+'').charAt((+[]))]( a['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+((![]+'').charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))]("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support['h'+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((+[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+'m'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'z'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]))] = a['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((+[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))]("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'k'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''[+[]]+'').charAt((-~[]))] = !!input['v'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))];

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support[(''+{}).charAt((-~''))+'p'+(!''+'').charAt((-''))+((![]+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] = opt[(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''))];

	// Tests for enctype support on a form (#6743)
	support[(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] = !!document[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))]("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select[(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))] = true;
	support[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((-''))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))] = !opt[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))];

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))]( "input" );
	input[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))]( "value", "" );
	support[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+'p'+(''[+[]]+'').charAt((+[]))+(!''+'').charAt((-''))] = input['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))+((!!''+[]).charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((-''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input['v'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))] = "t";
	input[(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+((![]+[]).charAt((-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((+''))+(!''+[]).charAt((-''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( "type", "radio" );
	support[(!''+'').charAt((-~''))+(!{}+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~''))+'V'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))] = input['v'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))] === "t";

	// Null elements to avoid leaks in IE.
	a = input = select = opt = div = null;
})();


var rreturn = /\r/g;

jQuery[(!{}+[]).charAt((-''))+(''[+[]]+'').charAt((-~[]))][([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] ) {
			if ( elem ) {
				hooks = jQuery['v'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(!{}+'').charAt((-~-~[]-~''))][ elem[(!''+[]).charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ] || jQuery['v'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~''-~''))][ elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))][(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]() ];

				if ( hooks && "get" in hooks && (ret = hooks['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))]( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem['v'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))];

				return typeof ret === "string" ?
					// handle most common string cases
					ret[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))](rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~''))+((!{}+[]).charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))]( value );

		return this[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'](function( i ) {
			var val;

			if ( this[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''))+(!{}+[]).charAt((-~-~''))]( this, i, jQuery( this )['v'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''))]() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~[]))+((![]+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~[]))+'y']( val ) ) {
				val = jQuery['m'+(!{}+[]).charAt((-~''))+'p']( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery['v'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+[]).charAt((-~-~''-~''))][ this[(!''+[]).charAt((+[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] ] || jQuery['v'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~''))][ this[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))][(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks[(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))]( this, val, "value" ) === undefined ) {
				this['v'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))] = val;
			}
		});
	}
});

jQuery[([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery[(!{}+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))][(!{}+'').charAt((-~''))+(!''+'').charAt((+''))+(!''+[]).charAt((-''))+(!''+[]).charAt((-~''))]( elem, "value" );
				return val != null ?
					val :
					jQuery[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+[]).charAt((+''))]( elem );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))],
					index = elem[(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'],
					one = elem[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options[(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'],
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option[(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))] ? !option[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))] : option['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))+((![]+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))]("disabled") === null ) &&
							( !option['p'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))][([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))] || !jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))]( option['p'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))], "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option )['v'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))]();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values['p'+([][+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~[]))+'h']( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem[(''+{}).charAt((-~''))+'p'+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))],
					values = jQuery['m'+(!{}+[]).charAt((-~''))+'k'+(''[+[]]+'').charAt((-~-~''-~[]))+((![]+[]).charAt((-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~''))+'y']( value ),
					i = options[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'];

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery[([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+((!!''+[]).charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~[]))+'y']( jQuery['v'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~[]-~[]))][(''+{}).charAt((-~[]))+'p'+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))]( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option[(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))] = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option[(!{}+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))+'H'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'gh'+(!''+[]).charAt((+''))];
						}

					} else {
						option[(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))+(([][+[]]+'').charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'x'] = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery[([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h']([ "radio", "checkbox" ], function() {
	jQuery['v'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!!''+[]).charAt((-~-~''-~''))][ this ] = {
		set: function( elem, value ) {
			if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~''-~[]))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~[]))+'y']( value ) ) {
				return ( elem[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'k'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))] = jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+((!!''+[]).charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~''))+'y']( jQuery(elem)['v'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))](), value ) >= 0 );
			}
		}
	};
	if ( !support[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'+(''+{}).charAt(((-~-~[]<<-~-~'')))+([][+[]]+'').charAt((-~[]))] ) {
		jQuery['v'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~''-~''))][ this ]['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))] = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+((![]+'').charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+'').charAt((+''))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))]("value") === null ? "on" : elem['v'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))];
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'xp'+(!''+'').charAt((-~[]))][(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+'H'+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))],
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+((!{}+[]).charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+((!!''+[]).charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-[]))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))],
	getSetInput = support[([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+'p'+(''[+[]]+'').charAt((+''))+(!''+'').charAt((+''))];

jQuery[(!{}+'').charAt((-[]))+(''[+[]]+'').charAt((-~''))][([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]({
	attr: function( name, value ) {
		return access( this, jQuery[(![]+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-~''))], name, value, arguments[(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((+''))+'h'] > 1 );
	},

	removeAttr: function( name ) {
		return this[([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'](function() {
			jQuery[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+(!''+'').charAt((-''))+(!''+[]).charAt((-~''))]( this, name );
		});
	}
});

jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))];

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+((!{}+'').charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-[]))+(!''+[]).charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))] === strundefined ) {
			return jQuery['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'p']( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery[([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+'XM'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))]( elem ) ) {
			name = name[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+((![]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]();
			hooks = jQuery[(!{}+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-[]))+(!''+'').charAt((-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!{}+'').charAt((-~-~[]-~''))][ name ] ||
				( jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+'xp'+(!''+'').charAt((-~''))]['m'+(!{}+[]).charAt((-~''))+(!''+'').charAt((+''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'][(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+(![]+[]).charAt((-~-~''))][(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))]( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+((![]+'').charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+(!''+'').charAt((+''))+(!''+'').charAt((-~[]))]( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks[(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))]( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem[(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+((!{}+[]).charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((+[]))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((-[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery[(![]+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))][(![]+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-~[]))]( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value['m'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h']( rnotwhite );

		if ( attrNames && elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'+((!{}+'').charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'x'][ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!''+[]).charAt((-~[]))]['m'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'][(''+{}).charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+(![]+'').charAt((-~-~''))][(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))]( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault[(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-[]))]( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery[(!{}+[]).charAt((-~''))+(!''+'').charAt((+''))+(!''+'').charAt((-[]))+(!''+'').charAt((-~[]))]( elem, name, "" );
				}

				elem[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~''))+((![]+[]).charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support[(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+'V'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))] && value === "radio" && jQuery[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-''))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))](elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem['v'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))];
					elem[(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+((![]+'').charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+(!''+'').charAt((-[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~''))+([][+[]]+'').charAt((+''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( "type", value );
					if ( val ) {
						elem['v'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))] = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+((!!''+[]).charAt((-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+[]))+(!''+[]).charAt((+[]))+(!''+'').charAt((-~[]))]( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))]( name ) ) {
			// IE<8 needs the *property* name
			elem[(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+((!!''+[]).charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-''))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))]( !getSetAttribute && jQuery['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+'p'+((![]+[]).charAt((+'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'x'][ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']( jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'xp'+(!''+'').charAt((-~[]))]['m'+(!{}+'').charAt((-~''))+(!''+'').charAt((-''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'][(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~''))][(![]+[]).charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-''))+(!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))]['m'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h']( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery[(!!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))][(![]+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(!''+[]).charAt((-''))+(!''+'').charAt((-~[]))];

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault[(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))]( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+((![]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]( "default-" + name ) ] ?
					name[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery[(!{}+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~[]-~[]))]['v'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))] = {
		set: function( elem, value, name ) {
			if ( jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))]( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem[(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-[]))+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-''))+(![]+[]).charAt((-~-~''))+(!''+[]).charAt((+[]))+'V'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))] = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook[(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))]( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))+((!{}+'').charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((+''))+(!''+'').charAt((-''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]( name );
			if ( !ret ) {
				elem[(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+((![]+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))](
					(ret = elem[(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+((![]+'').charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~''))]( name ))
				);
			}

			ret['v'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))] = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+((!{}+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-[]))+(!''+[]).charAt((-''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((+''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))]( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]))] = attrHandle[([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] = attrHandle[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]-~''))] =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+((![]+[]).charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( name )) && ret['v'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))] !== "" ?
					ret['v'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))] :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery['v'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!{}+[]).charAt((-~-~[]-~[]))][(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((+[]))+(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))] = {
		get: function( elem, name ) {
			var ret = elem['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+((![]+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-[]))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]( name );
			if ( ret && ret[(!!''+[]).charAt((-~-~[]-~''))+'p'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))] ) {
				return ret['v'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))];
			}
		},
		set: nodeHook[(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))]
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery[(![]+[]).charAt((-~[]))+(!''+'').charAt((+''))+(!''+[]).charAt((+''))+(!''+[]).charAt((-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~[]))+'k'+(!!''+[]).charAt((-~-~''-~[]))][(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-''))+(![]+'').charAt((-~''))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))] = {
		set: function( elem, value, name ) {
			nodeHook[(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))]( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h']([ "width", "height" ], function( i, name ) {
		jQuery[(![]+'').charAt((-~''))+(!''+'').charAt((-[]))+(!''+'').charAt((-''))+(!''+'').charAt((-~''))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~''-~''))][ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem[(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+[]))+(!''+'').charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~-~[]))+(''[+[]]+'').charAt((-''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))]( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support[(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'y'+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))] ) {
	jQuery[(!!''+[]).charAt((-~''))+(!''+'').charAt((-''))+(!''+'').charAt((-[]))+(!''+'').charAt((-~[]))+'H'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(!{}+[]).charAt((-~-~[]-~[]))][(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'y'+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))] = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem[(![]+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+'y'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))] || undefined;
		},
		set: function( elem, value ) {
			return ( elem[(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+[]))+'y'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))][(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((+''))] = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery[(!!''+[]).charAt((-''))+([][+[]]+'').charAt((-~''))][([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))]({
	prop: function( name, value ) {
		return access( this, jQuery['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'p'], name, value, arguments[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] > 1 );
	},

	removeProp: function( name ) {
		name = jQuery['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+((![]+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'x'][ name ] || name;
		return this[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h'](function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))];

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+'XM'+((!{}+[]).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))]( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+'p'+((!{}+[]).charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'x'][ name ] || name;
			hooks = jQuery['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~[]))+'k'+(![]+'').charAt((-~-~[]-~[]))][ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks[(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))]( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))]( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery[(![]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))][(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(!''+'').charAt((+[]))+(!''+'').charAt((-~''))]( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable[(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))]( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))] ) || rclickable[(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))]( elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-[]))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] ) && elem['h'+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-[]))] ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support['h'+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+[]))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+'m'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'z'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''))] ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']([ "href", "src" ], function( i, name ) {
		jQuery['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'pH'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(!!''+[]).charAt((-~-~''-~[]))][ name ] = {
			get: function( elem ) {
				return elem['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+((!!''+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!''+'').charAt((-[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-[]))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support[(''+{}).charAt((-~[]))+'p'+(!''+[]).charAt((-''))+((!!''+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''))] ) {
	jQuery['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'pH'+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~[]-~''))][(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]))] = {
		get: function( elem ) {
			var parent = elem['p'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))];

			if ( parent ) {
				parent[(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))+(([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'x'];

				// Make sure that it also works with optgroups, see #5701
				if ( parent['p'+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
					parent['p'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))][(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]))+(([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'x'];
				}
			}
			return null;
		}
	};
}

jQuery[([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery['p'+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+'p'+((!!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+'x'][ this[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+((![]+'').charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]() ] = this;
});

// IE6/7 call enctype encoding
if ( !support[(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ) {
	jQuery['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+'p'+((![]+'').charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'x'][(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery[(!{}+[]).charAt((-''))+([][+[]]+'').charAt((-~[]))][(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))]({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this[(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((-[]))+'h'],
			proceed = typeof value === "string" && value;

		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''-~''))+((!!''+[]).charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( value ) ) {
			return this[(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'](function( j ) {
				jQuery( this )[(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))]( value[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''))+(!{}+'').charAt((-~-~''))]( this, j, this[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~''))+(+{}+'').charAt((-''))+(![]+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" )['m'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h']( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+[]).charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] === 1 && ( elem[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] ?
					( " " + elem[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((+''))+(!{}+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] + " " )[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(![]+[]).charAt((-~-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!{}+[]).charAt((+[]))]( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery[(!''+[]).charAt((-''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m']( cur );
					if ( elem[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] !== finalValue ) {
						elem[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'],
			proceed = arguments[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'] === 0 || typeof value === "string" && value;

		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+[]).charAt((-~-~''-~''))+((!{}+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]( value ) ) {
			return this[([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'](function( j ) {
				jQuery( this )[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~''))]( value[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))]( this, j, this[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))] ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" )['m'+(!!''+[]).charAt((-~''))+(!''+'').charAt((+[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 1 && ( elem[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((-[]))+(![]+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] ?
					( " " + elem[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))] + " " )[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!!''+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))]( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(!!''+[]).charAt((-[]))]( " " + clazz + " " ) >= 0 ) {
							cur = cur[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(!!''+[]).charAt((-~-~''))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery[(!''+'').charAt((+[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'m']( cur ) : "";
					if ( elem[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~''))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] !== finalValue ) {
						elem[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+'').charAt((-~-~''))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(!{}+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this[(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))]( value ) : this[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~[]))]( value );
		}

		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+((![]+'').charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))]( value ) ) {
			return this[([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'](function( i ) {
				jQuery( this )[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'gg'+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~''))]( value[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~-~''))](this, i, this[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))], stateVal), stateVal );
			});
		}

		return this[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'](function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value['m'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h']( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self['h'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))]( className ) ) {
						self[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~[]))]( className );
					} else {
						self[(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))]( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(+{}+'').charAt((+[]))+(![]+'').charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
					// store className if set
					jQuery['_'+([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~''))]( this, "__className__", this[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((-~-~[]))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~''))+(+{}+'').charAt((+''))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))] );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(+{}+'').charAt((+[]))+(!{}+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] = this[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(![]+'').charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))] || value === false ? "" : jQuery['_'+(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~[]))]( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'];
		for ( ; i < l; i++ ) {
			if ( this[i][([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] === 1 && (" " + this[i][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~[]))+(+{}+'').charAt((-''))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))] + " ")[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+'p'+(![]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))](rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h']( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu")[(![]+'').charAt((-~-~[]-~''))+'p'+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))](" "), function( i, name ) {

	// Handle event binding
	jQuery[(!{}+[]).charAt((+[]))+([][+[]]+'').charAt((-~''))][ name ] = function( data, fn ) {
		return arguments[(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] > 0 ?
			this[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))]( name, null, data, fn ) :
			this[(!''+[]).charAt((+[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'gg'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))]( name );
	};
});

jQuery[(!{}+'').charAt((-''))+(''[+[]]+'').charAt((-~''))][([][+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))]({
	hover: function( fnOver, fnOut ) {
		return this['m'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))]( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))]( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this[(''+{}).charAt((-~[]))+(!!''+[]).charAt((-''))+(!!''+[]).charAt((-[]))]( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments[(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] === 1 ? this[(''+{}).charAt((-~[]))+(!{}+[]).charAt((+[]))+(!!''+[]).charAt((+''))]( selector, "**" ) : this[(''+{}).charAt((-~''))+(![]+'').charAt((+''))+(![]+'').charAt((+''))]( types, selector || "**", fn );
	}
});


var nonce = jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+'w']();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery['p'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt(((-~-~''<<-~-~[])))+(+{}+'').charAt((+[]))] = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window[((''+{}).charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+((!!''+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt(((-~-~''<<-~-~[])))+(+{}+'').charAt((-[]))] && window[((''+{}).charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+((![]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt(((-~-~[]<<-~-~'')))+(+{}+'').charAt((+[]))]['p'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))] ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window[((''+{}).charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+((!{}+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt(((-~-~''<<-~-~'')))+(+{}+'').charAt((+''))]['p'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery[(!''+'').charAt((+''))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'m']( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery[(!''+[]).charAt((-[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m']( str[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(!{}+[]).charAt((-~-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))]( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery['p'+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'XM'+((![]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()] = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window[((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt(((-~-~[]<<-~-~'')))+'MP'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))] ) { // Standard
			tmp = new DOMParser();
			xml = tmp['p'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!{}+'').charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+'m'+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+'g']( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml[(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+'y'+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))] = "false";
			xml[(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'XM'+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()]( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((+''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))] || xml['g'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+(![]+[]).charAt((-~-~''-~''))+((''+{}).charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'y'+((!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~[]))+'g'+(+{}+'').charAt((+''))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))]( "parsererror" ).length ) {
		jQuery[([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))]( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/"[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-''))]("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location['h'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((+[]))];
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))]( "a" );
	ajaxLocation['h'+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((+''))] = "";
	ajaxLocation = ajaxLocation['h'+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-''))];
}

// Segment location into parts
ajaxLocParts = rurl[(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))]( ajaxLocation[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]().match( rnotwhite ) || [];

		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~[]-~[]))+((![]+'').charAt((-'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-[]))]( 0 ) === "+" ) {
					dataType = dataType[(!!''+[]).charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || [])[(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((+''))+(!''+'').charAt((-[]))]( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || [])['p'+([][+[]]+'').charAt((-''))+(![]+'').charAt((-~-~[]-~[]))+'h']( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h']( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options[([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-[]))+(!!''+[]).charAt((-~''))+((!''+[]).charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~''))][([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-[]))+(!''+[]).charAt((-[]))]( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options[(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~''))][ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery[(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+'x'+((![]+'').charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(![]+'').charAt((-~-~''-~''))][(![]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(''+{}).charAt(((-~-~''<<-~-~'')))+'p'+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))] || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery[([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~-~[]-~''))],
		dataTypes = s[([][+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~[]))+(!''+'').charAt((-''))+(![]+'').charAt((-~''))+((!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))];

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes[(![]+'').charAt((-~-~[]-~[]))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-''))+(!''+[]).charAt((+''))]();
		if ( ct === undefined ) {
			ct = s['m'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] || jqXHR['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+((!''+'').charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~[]-~''))+'p'+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'H'+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))]("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ][(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))]( ct ) ) {
				dataTypes[([][+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((+''))+(!''+'').charAt((-[]))]( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))][ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes[(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-''))+(!''+[]).charAt((+''))]( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s[(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(![]+'').charAt((-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))][(!{}+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~''))]();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))] ) {
			converters[ conv[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]() ] = s[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))][ conv ];
		}
	}

	current = dataTypes[(!!''+[]).charAt((-~-~[]-~''))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((+[]))+(!''+[]).charAt((-''))]();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]-~''))+'p'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!{}+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~''-~''))][ current ] ) {
			jqXHR[ s[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~[]))+'p'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+((!{}+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~-~[]-~''))][ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s[(''[+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~[]))+((!!''+[]).charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))] ) {
			response = s[([][+[]]+'').charAt((-~-~''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~''))+((!{}+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))]( response, s[([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] );
		}

		prev = current;
		current = dataTypes[(![]+[]).charAt((-~-~[]-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((+''))+(!''+'').charAt((+''))]();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2[(![]+'').charAt((-~-~[]-~[]))+'p'+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+[]))]( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes[(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((+''))+(!''+'').charAt((-[]))]( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery['p'+(!{}+'').charAt((-~[]))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+((''+{}).charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+((![]+[]).charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt(((-~-~''<<-~-~'')))+(+{}+'').charAt((+[]))],

			// Parse text as xml
			"text xml": jQuery['p'+(![]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'XM'+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()]
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+'x'+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!!''+[]).charAt((-~-~[]-~[]))] ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery[(!!''+[]).charAt((-~''))+(''+{}).charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+'x'+((![]+'').charAt((-~-~''-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-''))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(![]+[]).charAt((-~-~[]-~[]))], target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery[(!!''+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~[]))+'x'+((!{}+[]).charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-''))+'p']( {}, options ),
			// Callbacks context
			callbackContext = s[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((+''))] || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+'').charAt((-[]))] && ( callbackContext[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] || callbackContext[(''+{}).charAt((-~-~[]-~[]))+'q'+(''[+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'y'] ) ?
				jQuery( callbackContext ) :
				jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))],
			// Deferreds
			deferred = jQuery[((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]))](),
			completeDeferred = jQuery[((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'+(!{}+'').charAt((-~-~''-~[]))]("once memory"),
			// Status-dependent callbacks
			statusCode = s[(!{}+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-''))+(!{}+'').charAt((-~-~''-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))] || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders[(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))]( responseHeadersString )) ) {
								responseHeaders[ match[1][(!''+'').charAt((-''))+(''+{}).charAt((-~''))+((!{}+[]).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s['m'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~[]))] = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR[(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]))+'w'+(!{}+'').charAt((-~''))+'y'+(!{}+[]).charAt((-~-~[]-~[]))]( map[ jqXHR[(!{}+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((+[]))+(!{}+'').charAt((-~-~''-~[]))] ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport[(![]+'').charAt((-~[]))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))+(!''+'').charAt((-[]))]( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred['p'+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+'m'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]( jqXHR ).complete = completeDeferred[(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))];
		jqXHR[(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~[]))] = jqXHR[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))];
		jqXHR[(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))] = jqXHR[(![]+'').charAt((+''))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~''))];

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s[([][+[]]+'').charAt((+''))+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))] = ( ( url || s[(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))] || ajaxLocation ) + "" )[(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(!{}+'').charAt((-~-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~''-~''))] = options['m'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-''))+'h'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))] || options[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] || s['m'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'h'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))] || s[(!''+'').charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))];

		// Extract dataTypes list
		s[([][+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~''))+(!''+[]).charAt((-''))+(![]+[]).charAt((-~[]))+((!''+'').charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))] = jQuery[(!''+[]).charAt((+[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m']( s[(''[+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(![]+[]).charAt((-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+'m'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))] == null ) {
			parts = rurl[([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))]( s[([][+[]]+'').charAt((-''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~-~''))][(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+'w'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]() );
			s[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'m'+(!{}+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))] = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s[([][+[]]+'').charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!''+'').charAt((+''))+(![]+'').charAt((-~[]))] && s['p'+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~''))+(!''+'').charAt((+''))+(![]+[]).charAt((-~''))] && typeof s[([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((+''))+(![]+'').charAt((-~[]))] !== "string" ) {
			s[([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~''))] = jQuery['p'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~[]))+'m']( s[([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(!{}+[]).charAt((-~''))], s[(!''+'').charAt((+[]))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''))] );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s['g'+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''))];

		// Watch for a new set of requests
		if ( fireGlobals && jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'v'+([][+[]]+'').charAt((-~-~''-~[]))]++ === 0 ) {
			jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))][(!''+'').charAt((-''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'gg'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))]("ajaxStart");
		}

		// Uppercase the type
		s[(!''+'').charAt((+[]))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] = s[(!''+[]).charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))][(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+((''[+[]]+'').charAt((+[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'pp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]();

		// Determine if request has content
		s['h'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))] = !rnoContent[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))]( s[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s[(''[+[]]+'').charAt((-''))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~-~''))];

		// More options handling for requests with no content
		if ( !s['h'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))] ) {

			// If data is available, append data to url
			if ( s[([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~''))] ) {
				cacheURL = ( s[(''[+[]]+'').charAt((-[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]))] += ( rquery[(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( cacheURL ) ? "&" : "?" ) + s[(''[+[]]+'').charAt((-~-~[]))+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+(![]+'').charAt((-~''))] );
				// #9682: remove data so that it's not used in an eventual retry
				delete s[(''[+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~''))+(!''+'').charAt((-[]))+(!!''+[]).charAt((-~''))];
			}

			// Add anti-cache in url if needed
			if ( s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+([][+[]]+'').charAt((-~-~[]-~[]))] === false ) {
				s[(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]))] = rts[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))]( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(!!''+[]).charAt((-~-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery[(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-''))]( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-[]))+'M'+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''))] ) {
			if ( jQuery[(![]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'M'+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]))][ cacheURL ] ) {
				jqXHR[(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((!''+'').charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~[]))+'q'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+'').charAt((-[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))]( "If-Modified-Since", jQuery[(!{}+'').charAt((-~-~[]))+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+'M'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''))][ cacheURL ] );
			}
			if ( jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(!{}+'').charAt((-~''))+'g'][ cacheURL ] ) {
				jqXHR[(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+((!''+'').charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+'q'+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))+'H'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))]( "If-None-Match", jQuery[(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))+(![]+'').charAt((-~''))+'g'][ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s[([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(![]+'').charAt((-~[]))] && s['h'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] && s[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+((!''+[]).charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] !== false || options[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+((!''+'').charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
			jqXHR[(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+((!''+'').charAt((-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+'q'+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))+'H'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))]( "Content-Type", s[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+((!''+[]).charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR[(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))+((!''+'').charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~''-~''))+'q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))](
			"Accept",
			s[([][+[]]+'').charAt((-~-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-''))+(![]+'').charAt((-~''))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))][ 0 ] && s[(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'p'+(!''+[]).charAt((+[]))+(![]+'').charAt((-~-~[]-~[]))][ s[([][+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~''))+((!''+[]).charAt((-[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~-~''-~''))][0] ] ?
				s[(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'p'+(!''+[]).charAt((+''))+(![]+[]).charAt((-~-~''-~''))][ s[([][+[]]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(!{}+'').charAt((-~[]))+((!''+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~''))][0] ] + ( s[([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(!{}+[]).charAt((-~[]))+((!''+'').charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]-~''))][ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s[(!{}+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'p'+(!''+'').charAt((+''))+(!{}+[]).charAt((-~-~[]-~[]))][ "*" ]
		);

		// Check for headers option
		for ( i in s['h'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))] ) {
			jqXHR[(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+((!''+'').charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~''))+'q'+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'H'+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))]( i, s['h'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))][ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s[(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((![]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))] && ( s[(''+{}).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))][(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+(!{}+'').charAt((-~-~''))]( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR[(!!''+[]).charAt((-~''))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-''))]();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'+((!{}+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))] = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext[(!''+[]).charAt((+[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'gg'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))]( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s[(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+'y'+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))] && s[(!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-''))+(!''+[]).charAt((-''))] > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-[]))]("timeout");
				}, s[(!''+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-''))+(!''+'').charAt((-''))] );
			}

			try {
				state = 1;
				transport[(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))]( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+'y'+((![]+[]).charAt((-~-~[]-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-''))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~[]))] = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((+''))+'M'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]))] ) {
					modified = jqXHR['g'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((!''+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~[]))+'p'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))]("Last-Modified");
					if ( modified ) {
						jQuery[(![]+[]).charAt((-~-~''))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+'M'+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''))][ cacheURL ] = modified;
					}
					modified = jqXHR['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))+((!''+[]).charAt((-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~''))+'p'+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))+'H'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))]("etag");
					if ( modified ) {
						jQuery[(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+(!!''+[]).charAt((-~''))+'g'][ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response[(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))+(![]+[]).charAt((-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))];
					success = response[([][+[]]+'').charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-''))+(!{}+'').charAt((-~''))];
					error = response[([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))];
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR[(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~''-~''))] = status;
			jqXHR[(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-[]))] = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-[]))+'h']( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+''))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-''))+'h']( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR[(![]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~''))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext[(!''+[]).charAt((+[]))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'gg'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))]( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred[(!!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((+[]))+'h']( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext[(!''+[]).charAt((-[]))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'gg'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))]( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))] ) ) {
					jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))][(!''+'').charAt((+''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'gg'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))]("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery['g'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))]( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery['g'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))]( url, undefined, callback, "script" );
	}
});

jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h']( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]-~[]))+((![]+[]).charAt((+'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery[(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~[]-~[]))+(![]+'').charAt((-~[]))+'x']({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h']( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery[(!!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~''))][ type ] = function( fn ) {
		return this[(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))]( type, fn );
	};
});


jQuery['_'+([][+[]]+'').charAt((-~-~''-~''))+'v'+(!{}+'').charAt((-~''))+(!{}+[]).charAt((-~-~''))+((''[+[]]+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''))] = function( url ) {
	return jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~''-~[]))+(![]+'').charAt((-~''))+'x']({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery[(!!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~[]))][([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]({
	wrapAll: function( html ) {
		if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+'').charAt((-~-~[]-~''))+((![]+[]).charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]( html ) ) {
			return this[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'](function(i) {
				jQuery(this)['w'+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~[]))+'p'+((!{}+[]).charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~-~[]))+(![]+'').charAt((-~-~''))]( html[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]))+(![]+[]).charAt((-~-~''))](this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0][(''+{}).charAt((-~[]))+'w'+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+(([][+[]]+'').charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))] )[([][+[]]+'').charAt((-~-~''-~[]))+'q'](0)[(''+{}).charAt(((-~-~''<<-~'')+-~''))+(![]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))](true);

			if ( this[0]['p'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))] ) {
				wrap[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(!''+'').charAt((-''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( this[0] );
			}

			wrap['m'+(!{}+'').charAt((-~''))+'p'](function() {
				var elem = this;

				while ( elem[(!{}+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''))] && elem[(![]+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((-''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))][([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))] === 1 ) {
					elem = elem[(![]+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))];
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~[]))+((!{}+'').charAt((-[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]( html ) ) {
			return this[([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'](function(i) {
				jQuery(this)['w'+(!''+[]).charAt((-~''))+(!{}+'').charAt((-~''))+'p'+(([][+[]]+'').charAt(((-~-~[]<<-~[])+-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))]( html[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(![]+'').charAt((-~-~''))](this, i) );
			});
		}

		return this[([][+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'](function() {
			var self = jQuery( this ),
				contents = self[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(!{}+'').charAt((-~-~[]-~''))]();

			if ( contents[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-[]))+'h'] ) {
				contents['w'+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~[]))+'p'+((![]+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~[]))]( html );

			} else {
				self[(!{}+[]).charAt((-~''))+'pp'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))]( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~[]-~[]))+((!!''+[]).charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( html );

		return this[(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'](function(i) {
			jQuery( this )['w'+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~[]))+'p'+((!!''+[]).charAt((-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~-~''))+(![]+[]).charAt((-~-~[]))]( isFunction ? html[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))](this, i) : html );
		});
	},

	unwrap: function() {
		return this['p'+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]().each(function() {
			if ( !jQuery[([][+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(+{}+'').charAt((-''))+(![]+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))]( this, "body" ) ) {
				jQuery( this )[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~''))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-''))+'h']( this[(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))+(+{}+'').charAt((+''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~[]-~''))] );
			}
		}).end();
	}
});


jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!''+'').charAt((-~''))][(!{}+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))]['h'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))] = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem[(''+{}).charAt((-~[]))+(!{}+[]).charAt((-[]))+(![]+'').charAt((-[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+'W'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''))+(!''+[]).charAt((-[]))+'h'] <= 0 && elem[(''+{}).charAt((-~''))+(!!''+[]).charAt((-''))+(!{}+'').charAt((-''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+[]))+'H'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'gh'+(!''+'').charAt((-''))] <= 0 ||
		(!support[(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt((-~-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+'H'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~-~'')))+(!{}+'').charAt((+[]))+(!{}+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~-~[]-~[]))]() &&
			((elem[(![]+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+'y'+(!{}+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))] && elem[(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))+'y'+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))][([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]-~[]))+'p'+(![]+'').charAt((-~-~''))+(![]+[]).charAt((-~[]))+'y']) || jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~[]))]( elem, "display" )) === "none");
};

jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!''+'').charAt((-~[]))][(![]+[]).charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~[]))]['v'+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))] = function( elem ) {
	return !jQuery[([][+[]]+'').charAt((-~-~''-~[]))+'xp'+(!''+[]).charAt((-~[]))][(![]+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+[]).charAt((-~-~''))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))]['h'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))]( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~''-~[]))+((![]+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+(!{}+[]).charAt((-~''))+'y']( obj ) ) {
		// Serialize array item.
		jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h']( obj, function( i, v ) {
			if ( traditional || rbracket[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-''))]( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery[(!''+[]).charAt((+''))+'yp'+([][+[]]+'').charAt((-~-~''-~[]))]( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery['p'+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~''))+'m'] = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~[]-~''))+((![]+[]).charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((+[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( value ) ? value() : ( value == null ? "" : value );
			s[ s[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-[]))+'h'] ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery[(![]+'').charAt((-~''))+(''+{}).charAt((-~-~''-~[]))+(![]+'').charAt((-~[]))+'x'+((!{}+'').charAt((-~-~''-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!{}+'').charAt((-~-~''-~''))] && jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+'x'+((![]+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+(!''+'').charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!!''+[]).charAt((-~-~''-~''))][(!''+'').charAt((+''))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''))];
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+[]).charAt((-~-~''-~''))+((![]+[]).charAt((-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~[]))+'y']( a ) || ( a[(''+{}).charAt((-~-~[]-~[]))+'q'+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'y'] && !jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''-~[]))+'P'+(![]+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+[]))]( a ) ) ) {
		// Serialize the form elements
		jQuery[(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h']( a, function() {
			add( this[([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))], this['v'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~''))] );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s[(''+{}).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))]( "&" ).replace( r20, "+" );
};

jQuery[(![]+'').charAt((+[]))+(''[+[]]+'').charAt((-~''))][(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]({
	serialize: function() {
		return jQuery['p'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~[]))+'m']( this[(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'z'+(''[+[]]+'').charAt((-~-~''-~''))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+(![]+[]).charAt((-~''))+'y']() );
	},
	serializeArray: function() {
		return this['m'+(![]+'').charAt((-~[]))+'p'](function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery['p'+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+'p']( this, "elements" );
			return elements ? jQuery['m'+(![]+[]).charAt((-~''))+'k'+(''[+[]]+'').charAt((-~-~''-~''))+((![]+'').charAt((-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~''))+'y']( elements ) : this;
		})
		.filter(function() {
			var type = this[(!''+'').charAt((-[]))+'yp'+([][+[]]+'').charAt((-~-~''-~''))];
			// Use .is(":disabled") so that fieldset[disabled] works
			return this[([][+[]]+'').charAt((-~''))+(![]+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))] && !jQuery( this )[([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~''))]( ":disabled" ) &&
				rsubmittable[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( this[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((-''))+(![]+[]).charAt((-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))] ) && !rsubmitterTypes[(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))]( type ) &&
				( this[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''))] || !rcheckableType[(!''+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+''))]( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this )['v'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''))]();

			return val == null ?
				null :
				jQuery[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(![]+'').charAt((-~-~''-~[]))+((![]+'').charAt((-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(![]+[]).charAt((-~''))+'y']( val ) ?
					jQuery['m'+(!{}+'').charAt((-~[]))+'p']( val, function( val ) {
						return { name: elem[(''[+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))], value: val[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]( rCRLF, "\r\n" ) };
					}) :
					{ name: elem[([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~''))+'m'+([][+[]]+'').charAt((-~-~[]-~[]))], value: val[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'p'+(![]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery[(![]+'').charAt((-~''))+(''+{}).charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+'x'+((!{}+'').charAt((-~-~''-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(![]+[]).charAt((-~-~[]-~''))]['xh'+(!''+'').charAt((-~[]))] = window[((![]+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~[]))+'X'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((-''))] !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this[(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+'').charAt((-~-~[]-~[]))+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]))] &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i[(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((-[]))]( this[(!''+[]).charAt((-''))+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery[(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~[]))+'x'+((!{}+'').charAt((-~-~''-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!{}+'').charAt((-~-~''-~[]))]['xh'+(!''+[]).charAt((-~''))]();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window[((!{}+[]).charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~[]))+'X'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((+[]))] ) {
	jQuery( window )[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))]( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~''))] = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support[(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~''))+(!{}+'').charAt((-~''))+'x'] = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery[(![]+'').charAt((-~[]))+(''+{}).charAt((-~-~''-~[]))+(!{}+[]).charAt((-~[]))+'x'+((!''+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+'p'+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~[]))+(!''+[]).charAt((-''))](function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~''))+'m'+(![]+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))] || support[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))] ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options['xh'+(!''+'').charAt((-~''))](),
						id = ++xhrId;

					// Open the socket
					xhr[(''+{}).charAt((-~[]))+'p'+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))]( options[(!''+'').charAt((+''))+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))], options[([][+[]]+'').charAt((-[]))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]))], options[(!!''+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+'y'+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))], options[(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))], options['p'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''-~[]))+'w'+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))] );

					// Apply custom fields if provided
					if ( options['xh'+(!''+[]).charAt((-~[]))+((![]+[]).charAt((-[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]-~[]))] ) {
						for ( i in options['xh'+(!''+'').charAt((-~''))+((![]+'').charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]-~''))] ) {
							xhr[ i ] = options['xh'+(!''+'').charAt((-~''))+((![]+[]).charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~''-~''))][ i ];
						}
					}

					// Override mime type if needed
					if ( options['m'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] && xhr[(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'M'+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+((!''+[]).charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+(''[+[]]+'').charAt((-~-~[]-~''))] ) {
						xhr[(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'M'+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))]( options['m'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+((!''+[]).charAt((-'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~''-~[]))] );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]-~''))+(([][+[]]+'').charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'m'+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))] && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr[(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))+((!''+[]).charAt((-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~''-~[]))+'q'+(''[+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((-''))+'H'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))]( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr[(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]( ( options['h'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))] && options[(''[+[]]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-''))+(![]+'').charAt((-~[]))] ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr[(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'y'+((![]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!''+[]).charAt((+''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))] === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+'y'+(!{}+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))+(![]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'+(!{}+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~[]-~''))] = jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~''))+'p'];

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+'y'+((![]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))] !== 4 ) {
									xhr[(!{}+'').charAt((-~''))+(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+(!''+[]).charAt((-~''))+(!''+'').charAt((-''))]();
								}
							} else {
								responses = {};
								status = xhr[(!{}+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))+(!!''+[]).charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((+[]))+(![]+[]).charAt((-~-~[]-~''))];

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr[(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+'p'+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((+[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((-''))] === "string" ) {
									responses[(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+'').charAt((+[]))] = xhr[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~''-~''))+'p'+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+((!''+'').charAt((-[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+'x'+(!''+[]).charAt((-[]))];
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr[(!!''+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((+''))+(![]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(!''+'').charAt((+[]))];
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options[([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~''))+((!!''+[]).charAt((-~-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''))] && !options[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'m'+(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~''))] ) {
									status = responses[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((+''))] ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr['g'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))+((!{}+'').charAt((-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(![]+[]).charAt((-~-~[]))+(!!''+[]).charAt((-~-~[]))+((!''+[]).charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~[]-~''))+'p'+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+'H'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))]() );
						}
					};

					if ( !options[(!{}+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+'y'+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))] ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr[(!''+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))+'y'+((![]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((-[]))+(''[+[]]+'').charAt((-~-~''-~[]))] === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr[(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'y'+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(![]+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~''))] = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window['XM'+((!!''+[]).charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'H'+(!''+'').charAt((-''))+(!''+'').charAt((+''))+'p'+((!''+[]).charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+'q'+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(!''+'').charAt((+[]))]();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window[((!{}+[]).charAt((-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'v'+(''[+[]]+'').charAt((-~-~''-~[]))+'X'+(''+{}).charAt(((-~-~''<<-~-~[])))+(''+{}).charAt((-~-~[]))+(''+{}).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-''))]( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery[(!!''+[]).charAt((-~''))+(''+{}).charAt((-~-~''-~''))+(!{}+[]).charAt((-~[]))+'x'+((![]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-''))+'p']({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery['g'+(![]+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+'v'+(!{}+'').charAt((-~[]))+(!!''+[]).charAt((-~-~''))]( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery[(![]+[]).charAt((-~''))+(''+{}).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~''))+'xP'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))]( "script", function( s ) {
	if ( s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'h'+(''[+[]]+'').charAt((-~-~[]-~[]))] === undefined ) {
		s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(''[+[]]+'').charAt((-~-~''-~''))] = false;
	}
	if ( s[(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(![]+[]).charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'m'+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((-~[]))] ) {
		s[(!''+[]).charAt((-''))+'yp'+(''[+[]]+'').charAt((-~-~''-~''))] = "GET";
		s['g'+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~''))] = false;
	}
});

// Bind script tag hack transport
jQuery[(![]+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~[]))+(![]+[]).charAt((-~[]))+'x'+((!''+'').charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!''+'').charAt((-~[]))+(![]+[]).charAt((-~''))+(''[+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+'p'+(''+{}).charAt((-~[]))+(!''+'').charAt((-~[]))+(!''+'').charAt((-[]))]( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s[(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))+((''[+[]]+'').charAt((-~-~[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''+{}).charAt((-~[]))+'m'+(!{}+'').charAt((-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))] ) {

		var script,
			head = document['h'+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))] || jQuery("head")[0] || document[([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))];

		return {

			send: function( _, callback ) {

				script = document[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((-~-~[]-~''))+((''[+[]]+'').charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((+''))]("script");

				script[(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+'y'+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))] = true;

				if ( s[(!{}+[]).charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+'p'+(!''+'').charAt((-[]))+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+(![]+'').charAt((-~[]))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((+''))] ) {
					script[(''+{}).charAt(((-~-~''<<-~[])+-~''))+'h'+(!!''+[]).charAt((-~''))+(!''+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))] = s[(!!''+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'p'+(!''+[]).charAt((+[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+'h'+(![]+[]).charAt((-~''))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-''))];
				}

				script[(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))] = s[(''[+[]]+'').charAt((+''))+(!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''))];

				// Attach handlers for all browsers
				script[(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(![]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))] = script[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'y'+(!!''+[]).charAt((-~-~''-~[]))+(!''+'').charAt((-''))+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-''))+([][+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h'+(![]+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~''))] = function( _, isAbort ) {

					if ( isAbort || !script[(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(![]+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+'y'+((!!''+[]).charAt((-~-~''-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(!''+[]).charAt((-''))+(!{}+'').charAt((-~[]))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~[]-~[]))] || /loaded|complete/[(!''+'').charAt((-''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~''))+(!''+[]).charAt((-[]))]( script[(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+'y'+((!!''+[]).charAt((-~-~[]-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((+''))+(![]+'').charAt((-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))] ) ) {

						// Handle memory leak in IE
						script[(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!{}+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''))] = script[(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+'y'+(!{}+[]).charAt((-~-~[]-~''))+(!''+[]).charAt((-[]))+(!{}+[]).charAt((-~''))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'h'+(!{}+[]).charAt((-~''))+([][+[]]+'').charAt((-~''))+'g'+([][+[]]+'').charAt((-~-~[]-~[]))] = null;

						// Remove the script
						if ( script['p'+(!!''+[]).charAt((-~''))+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(+{}+'').charAt((-''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))] ) {
							script['p'+(![]+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(+{}+'').charAt((-''))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))][(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+'m'+(''+{}).charAt((-~[]))+'v'+([][+[]]+'').charAt((-~-~[]-~''))+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'h'+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]))]( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head[(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+(!''+'').charAt((+''))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((+''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]( script, head[(!{}+[]).charAt((-[]))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(!''+'').charAt((+''))+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''))] );
			},

			abort: function() {
				if ( script ) {
					script[(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''))]( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~[]-~''))+(![]+[]).charAt((-~[]))+'x'+((!!''+[]).charAt((-~-~''-~[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-[]))+([][+[]]+'').charAt((+''))+'p']({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks['p'+(''+{}).charAt((-~[]))+'p']() || ( jQuery[(''[+[]]+'').charAt((-~-~[]-~[]))+'xp'+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))] + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery[(!{}+[]).charAt((-~''))+(''+{}).charAt((-~-~''-~''))+(![]+[]).charAt((-~[]))+'xP'+(!''+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+'').charAt((-[]))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]))+(!''+[]).charAt((-''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))]( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s[(''+{}).charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+'p'] !== false && ( rjsonp[(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+''))]( s[([][+[]]+'').charAt((+[]))+(!''+'').charAt((-~[]))+(![]+'').charAt((-~-~[]))] ) ?
			"url" :
			typeof s[([][+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-[]))+(!{}+'').charAt((-~[]))] === "string" && !( s[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+((!''+[]).charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~[]))] || "" )[([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'x'+(''+{}).charAt(((-~-~''<<-~-~[])))+(!{}+[]).charAt((+''))]("application/x-www-form-urlencoded") && rjsonp[(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~''))+(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+[]))]( s[(''[+[]]+'').charAt((-~-~''))+(!!''+[]).charAt((-~''))+(!''+'').charAt((-''))+(![]+[]).charAt((-~''))] ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s[(''[+[]]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~[]))+(!''+'').charAt((-[]))+(![]+[]).charAt((-~''))+((!''+'').charAt((+'')))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~[]-~''))][ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s[(''+{}).charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))+'p'+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(![]+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'k'] = jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+((![]+[]).charAt((-'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))]( s[(''+{}).charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+'p'+((''+{}).charAt(((-~-~''<<-~'')+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~''))+(![]+'').charAt((-~-~[]))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'] ) ?
			s[(''+{}).charAt((-~-~[]-~[]))+(!{}+[]).charAt((-~-~''-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+'p'+((''+{}).charAt(((-~-~[]<<-~'')+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~''))+(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~-~''))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+'k']() :
			s[(''+{}).charAt((-~-~''-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+'p'+((''+{}).charAt(((-~-~''<<-~'')+-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(![]+[]).charAt((-~-~''))+(''+{}).charAt((-~-~''))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'k'];

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ][(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'p'+(![]+[]).charAt((-~-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~''))]( rjsonp, "$1" + callbackName );
		} else if ( s[(''+{}).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+'p'] !== false ) {
			s[([][+[]]+'').charAt((+''))+(!''+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]))] += ( rquery[(!''+'').charAt((+[]))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+[]))]( s[(''[+[]]+'').charAt((+[]))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''))] ) ? "&" : "?" ) + s[(''+{}).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+'p'] + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!''+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~''))]["script json"] = function() {
			if ( !responseContainer ) {
				jQuery[([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(''+{}).charAt((-~''))+(!''+[]).charAt((-~''))]( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s[([][+[]]+'').charAt((-~-~[]))+(![]+[]).charAt((-~[]))+(!''+[]).charAt((+''))+(!{}+'').charAt((-~[]))+((!''+'').charAt((+[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+'yp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~''-~[]))][ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR[(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]))+'w'+(!!''+[]).charAt((-~[]))+'y'+(![]+'').charAt((-~-~[]-~[]))](function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s[(''+{}).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+'p'+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~[]))+(![]+'').charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))+(''+{}).charAt((-~-~[]))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+'k'] = originalSettings[(''+{}).charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~[]))+'p'+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~''))+(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'k'];

				// save the callback name for future use
				oldCallbacks['p'+([][+[]]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~[]))+'h']( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery[(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~''))+((!{}+'').charAt((+'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!{}+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+[]).charAt((+''))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery['p'+(!{}+'').charAt((-~''))+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))+'H'+((!''+[]).charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+[]).charAt((-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'M'+((!{}+'').charAt((-~-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()] = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag[(''[+[]]+'').charAt((-~-~''-~[]))+'x'+([][+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))]( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~[]))+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(([][+[]]+'').charAt((-~-~[]-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(!{}+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))]( parsed[1] ) ];
	}

	parsed = jQuery[(''+{}).charAt((-~-~[]))+([][+[]]+'').charAt((+''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]))+((![]+'').charAt((-'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(!''+'').charAt((-~''))+(!{}+[]).charAt((-~''))+'gm'+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))]( [ data ], context, scripts );

	if ( scripts && scripts[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'] ) {
		jQuery( scripts )[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''+{}).charAt((-~[]))+'v'+(''[+[]]+'').charAt((-~-~[]-~[]))]();
	}

	return jQuery['m'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'g'+(''[+[]]+'').charAt((-~-~''-~[]))]( [], parsed[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]))+(+{}+'').charAt((-[]))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''-~[]))] );
};


// Keep a copy of the old load method
var _load = jQuery[(![]+[]).charAt((+''))+(''[+[]]+'').charAt((-~''))][(!{}+[]).charAt((-~-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))];

/**
 * Load a url into a page
 */
jQuery[(![]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))][(!!''+[]).charAt((-~-~''))+(''+{}).charAt((-~''))+(![]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))] = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load[(!!''+[]).charAt((-~[]))+'pp'+(!{}+'').charAt((-~-~''))+'y']( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+'x'+(''+{}).charAt(((-~-~[]<<-~-~'')))+(!{}+[]).charAt((-[]))](" ");

	if ( off >= 0 ) {
		selector = url[(![]+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~[]))]( off, url[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((+[]))+'h'] );
		url = url[(!{}+[]).charAt((-~-~[]-~''))+(!{}+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))]( 0, off );
	}

	// If it's a function
	if ( jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+((!!''+[]).charAt((+'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((+[]))+(''[+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+[]).charAt((+[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+'').charAt((-''))+'h'] > 0 ) {
		jQuery[(!{}+[]).charAt((-~[]))+(''+{}).charAt((-~-~''-~[]))+(!{}+'').charAt((-~''))+'x']({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self['h'+(!''+'').charAt((+''))+'m'+(![]+[]).charAt((-~-~[]))]( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>")[(!!''+[]).charAt((-~[]))+'pp'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))]( jQuery['p'+(!{}+'').charAt((-~''))+(!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+'H'+((!''+[]).charAt((+[])))[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+'M'+((!{}+'').charAt((-~-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'C'+(!{}+[]).charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()]( responseText ) )[(![]+[]).charAt((+''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))]( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+'h']( callback, response || [ jqXHR[(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~''-~[]))+'p'+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+((!''+'').charAt((+'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+([][+[]]+'').charAt((-~-~''-~''))+'x'+(!''+'').charAt((-''))], status, jqXHR ] );
		});
	}

	return this;
};




jQuery[(''[+[]]+'').charAt((-~-~''-~''))+'xp'+(!''+'').charAt((-~[]))][(!{}+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~''))+(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))][(!{}+'').charAt((-~''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+(!!''+[]).charAt((-~''))+(!''+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]))] = function( elem ) {
	return jQuery['g'+(!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~''-~[]))+'p'](jQuery[(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))], function( fn ) {
		return elem === fn[(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+'m'];
	}).length;
};





var docElem = window[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((+''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((+''))+(([][+[]]+'').charAt((-~-~''-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))];

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''-~''))+'W'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~[]))+'w']( elem ) ?
		elem :
		elem[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+((!''+[]).charAt((-[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))]()+'yp'+([][+[]]+'').charAt((-~-~[]-~''))] === 9 ?
			elem[(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((+[]))+(![]+[]).charAt((-~''))+([][+[]]+'').charAt((-[]))+(!!''+[]).charAt((-~-~[]))+(!''+'').charAt((+''))+'V'+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+'w'] || elem['p'+(![]+'').charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+'W'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+'w'] :
			false;
}

jQuery[(''+{}).charAt((-~[]))+(!{}+'').charAt((+[]))+(![]+'').charAt((+[]))+(!!''+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))] = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~-~''-~''))]( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem[(!!''+[]).charAt((-~-~''-~''))+(!''+[]).charAt((+''))+'y'+(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))]['p'+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~''<<-~'')+-~''))+(!''+'').charAt((-[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))] = "relative";
		}

		curOffset = curElem[(''+{}).charAt((-~[]))+(!{}+[]).charAt((+''))+(![]+[]).charAt((-[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((+[]))]();
		curCSSTop = jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+'').charAt((-~-~''-~[]))+(![]+'').charAt((-~-~''-~''))]( elem, "top" );
		curCSSLeft = jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!!''+[]).charAt((-~-~''-~[]))+(![]+'').charAt((-~-~[]-~[]))]( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery[([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-~[]))+((!{}+[]).charAt((-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(!''+'').charAt((-~''))+(!''+[]).charAt((-~''))+(![]+'').charAt((-~''))+'y']("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem['p'+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~''))]();
			curTop = curPosition[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'p'];
			curLeft = curPosition[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((+''))+(!''+'').charAt((-''))];
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(![]+'').charAt((-~-~''-~''))+((![]+[]).charAt((-[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+([][+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~''))]( options ) ) {
			options = options[(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~''))+(![]+'').charAt((-~-~[]))+(![]+'').charAt((-~-~[]))]( elem, i, curOffset );
		}

		if ( options[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'p'] != null ) {
			props[(!''+[]).charAt((-[]))+(''+{}).charAt((-~[]))+'p'] = ( options[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'p'] - curOffset[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'p'] ) + curTop;
		}
		if ( options[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-''))+(!''+'').charAt((+[]))] != null ) {
			props[(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+''))+(!''+[]).charAt((+[]))] = ( options[(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((+''))+(!''+[]).charAt((+''))] - curOffset[(![]+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((+[]))+(!''+[]).charAt((+''))] ) + curLeft;
		}

		if ( "using" in options ) {
			options[(''[+[]]+'').charAt((+''))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(''[+[]]+'').charAt((-~[]))+'g'][(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~''))+(![]+'').charAt((-~-~[]))]( elem, props );
		} else {
			curElem[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(![]+[]).charAt((-~-~[]-~[]))]( props );
		}
	}
};

jQuery[(!!''+[]).charAt((+[]))+([][+[]]+'').charAt((-~''))][(''[+[]]+'').charAt((-~-~[]-~[]))+'x'+(!''+[]).charAt((-[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~[]))]({
	offset: function( options ) {
		if ( arguments[(![]+'').charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+[]))+'h'] ) {
			return options === undefined ?
				this :
				this[(''[+[]]+'').charAt((-~-~''-~[]))+(!!''+[]).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h'](function( i ) {
					jQuery[(''+{}).charAt((-~[]))+(![]+[]).charAt((-[]))+(![]+[]).charAt((-''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((+''))][(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+(''+{}).charAt(((-~-~[]<<-~-~[])))+(![]+'').charAt((-[]))+(!!''+[]).charAt((+''))+(!{}+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((+[]))]( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem[(''+{}).charAt((-~''))+'w'+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+((''[+[]]+'').charAt((-~-~'')))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(''[+[]]+'').charAt((-[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))];

		if ( !doc ) {
			return;
		}

		docElem = doc[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+([][+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(![]+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))];

		// Make sure it's not a disconnected DOM node
		if ( !jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+[]))+(!!''+[]).charAt((-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''[+[]]+'').charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))]( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem['g'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+((''+{}).charAt((-~-~'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((+[]))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''[+[]]+'').charAt((-~[]))+'g'+((''+{}).charAt(((-~-~[]<<-~'')+-~[])))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+((!''+[]).charAt((-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~''))]()+(''[+[]]+'').charAt((-~-~''-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))] !== strundefined ) {
			box = elem['g'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(!!''+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-''))+([][+[]]+'').charAt((-~[]))+(''[+[]]+'').charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~[]))+'g'+((''+{}).charAt(((-~-~''<<-~[])+-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(![]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-[]))+((!''+[]).charAt((-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~''))+'C'+(![]+[]).charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~[]))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((+''))]();
		}
		win = getWindow( doc );
		return {
			top: box[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'p']  + ( win['p'+(!{}+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+'Y'+(''+{}).charAt(((-~-~[]<<-~-~[])))+(!{}+[]).charAt((+''))+(!!''+[]).charAt((+''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-''))] || docElem[(!{}+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!''+'').charAt((-~''))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~''))+(!{}+[]).charAt((-~-~''))+((!''+'').charAt((-'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~[]))+(!{}+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+'p'] )  - ( docElem[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!''+[]).charAt((+[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~''))+'p']  || 0 ),
			left: box[(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((+''))+(!''+[]).charAt((-[]))] + ( win['p'+(![]+'').charAt((-~''))+'g'+(''[+[]]+'').charAt((-~-~''-~''))+'X'+(''+{}).charAt(((-~-~''<<-~-~[])))+(![]+'').charAt((-''))+(![]+[]).charAt((-[]))+(!!''+[]).charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((+''))] || docElem[(!!''+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(![]+'').charAt((-~-~[]))+(!!''+[]).charAt((-~-~''))+((!!''+[]).charAt((-~-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~[]))]()+(''[+[]]+'').charAt((-~-~[]-~''))+(![]+[]).charAt((+[]))+(!''+[]).charAt((+[]))] ) - ( docElem[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(!{}+'').charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~''))+(!''+[]).charAt((-[]))+((!{}+'').charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~[]))+'C'+(!{}+'').charAt((-~''))+(![]+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+([][+[]]+'').charAt((-~-~[]-~''))+(!{}+[]).charAt((+''))+(!''+[]).charAt((+[]))] || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+[]).charAt((-~-~[]-~[]))+(!{}+'').charAt((-~-~''-~[]))]( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem['g'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-''))+((''+{}).charAt((-~-~[])))[(!''+[]).charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(!{}+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-''))+(''[+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''[+[]]+'').charAt((-~''))+'g'+((''+{}).charAt(((-~-~''<<-~[])+-~[])))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'C'+(![]+'').charAt((-~''))+(![]+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~[]))+([][+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((+''))+((!''+[]).charAt((-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~[]))+(![]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~-~''-~''))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!''+[]).charAt((+[]))]();
		} else {
			// Get *real* offsetParent
			offsetParent = this[(''+{}).charAt((-~[]))+(![]+[]).charAt((-[]))+(!{}+[]).charAt((-[]))+(!{}+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-[]))+'P'+(![]+[]).charAt((-~''))+(!''+[]).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))]();

			// Get correct offsets
			offset = this[(''+{}).charAt((-~[]))+(![]+[]).charAt((+[]))+(!{}+'').charAt((-''))+(!{}+[]).charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+[]).charAt((+[]))]();
			if ( !jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(+{}+'').charAt((+[]))+(!{}+'').charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))]( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent[(''+{}).charAt((-~[]))+(!!''+[]).charAt((-[]))+(!{}+[]).charAt((-''))+(![]+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-''))]();
			}

			// Add offsetParent borders
			parentOffset[(!''+[]).charAt((-''))+(''+{}).charAt((-~''))+'p']  += jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!{}+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-~-~''-~[]))]( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~[]))+(![]+[]).charAt((-[]))+(!''+[]).charAt((-''))] += jQuery[(''+{}).charAt(((-~-~[]<<-~[])+-~''))+(![]+'').charAt((-~-~''-~[]))+(!{}+[]).charAt((-~-~[]-~[]))]( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'p']  - parentOffset[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'p'] - jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~[]-~''))+(![]+[]).charAt((-~-~[]-~[]))]( elem, "marginTop", true ),
			left: offset[(![]+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(!!''+[]).charAt((-''))+(!''+'').charAt((+''))] - parentOffset[(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((+[]))+(!''+'').charAt((+''))] - jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!{}+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~''-~''))]( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this['m'+(![]+[]).charAt((-~''))+'p'](function() {
			var offsetParent = this[(''+{}).charAt((-~[]))+(![]+[]).charAt((-''))+(!!''+[]).charAt((+''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((+''))+'P'+(!{}+[]).charAt((-~[]))+(!''+[]).charAt((-~''))+(''[+[]]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))] || docElem;

			while ( offsetParent && ( !jQuery[(''[+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~''-~''))+(+{}+'').charAt((-[]))+(!!''+[]).charAt((-~[]))+'m'+([][+[]]+'').charAt((-~-~''-~''))]( offsetParent, "html" ) && jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(![]+[]).charAt((-~-~[]-~[]))+(![]+'').charAt((-~-~''-~[]))]( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent[(''+{}).charAt((-~[]))+(!{}+[]).charAt((-''))+(![]+'').charAt((+''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-''))+'P'+(!!''+[]).charAt((-~[]))+(!''+'').charAt((-~''))+([][+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-[]))];
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(![]+'').charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'h']( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/[(!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!{}+[]).charAt((-~-~[]-~[]))+(!''+'').charAt((-[]))]( prop );

	jQuery[(!!''+[]).charAt((+''))+(''[+[]]+'').charAt((-~''))][ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win[([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))][([][+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+([][+[]]+'').charAt((-''))+'m'+([][+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((-''))+(([][+[]]+'').charAt((-~-~''-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~-~[]-~''))]()+(!{}+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((-''))][ method ] :
					elem[ method ];
			}

			if ( win ) {
				win[(!!''+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(!{}+[]).charAt((-~-~[]))+(!{}+[]).charAt((-~-~''))+((!''+'').charAt((-[])))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!{}+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))](
					!top ? val : jQuery( win )[(!{}+[]).charAt((-~-~[]-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+(!''+'').charAt((-~''))+(''+{}).charAt((-~[]))+(!{}+'').charAt((-~-~''))+(![]+[]).charAt((-~-~[]))+((!{}+[]).charAt((-~-~'')))[(!''+'').charAt((-[]))+(''+{}).charAt((-~[]))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+'').charAt((-~[]))+'C'+(![]+[]).charAt((-~[]))+(![]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~[]))+(![]+'').charAt((+[]))+(!''+[]).charAt((+[]))](),
					top ? val : jQuery( win )[(!!''+[]).charAt((-~-~''-~''))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+(!''+'').charAt((-~[]))+(''+{}).charAt((-~''))+(!!''+[]).charAt((-~-~[]))+(!{}+'').charAt((-~-~[]))+((!''+'').charAt((+'')))[(!''+[]).charAt((-[]))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~''))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~-~[]-~''))]()+(''+{}).charAt((-~[]))+'p']()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments[(!!''+[]).charAt((-~-~''))+(''[+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~''))+'g'+(!''+'').charAt((+[]))+'h'], null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery[([][+[]]+'').charAt((-~-~[]-~[]))+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~[]<<-~'')+-~''))+'h']( [ "top", "left" ], function( i, prop ) {
	jQuery[(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!!''+[]).charAt((-~-~''-~[]))+(!{}+'').charAt((-~-~[]-~''))+'H'+(''+{}).charAt((-~''))+(''+{}).charAt((-~''))+'k'+(![]+'').charAt((-~-~[]-~[]))][ prop ] = addGetHookIf( support['p'+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+'x'+(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~-~[]))+'P'+(''+{}).charAt((-~''))+(![]+'').charAt((-~-~''-~''))+([][+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(!''+'').charAt((-''))+(''[+[]]+'').charAt(((-~-~[]<<-~'')+-~''))+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))],
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx[(!''+[]).charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!{}+'').charAt((-~-~[]-~''))+(!''+'').charAt((+[]))]( computed ) ?
					jQuery( elem )['p'+(''+{}).charAt((-~''))+(![]+[]).charAt((-~-~''-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+(!''+'').charAt((-''))+([][+[]]+'').charAt(((-~-~[]<<-~'')+-~[]))+(''+{}).charAt((-~''))+(''[+[]]+'').charAt((-~''))]()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery[([][+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~''))+'h']( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery[(''[+[]]+'').charAt((-~-~[]-~''))+(!{}+'').charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~[])+-~[]))+'h']( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery[(![]+'').charAt((-''))+(''[+[]]+'').charAt((-~''))][ funcName ] = function( margin, value ) {
			var chainable = arguments[(!!''+[]).charAt((-~-~''))+([][+[]]+'').charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~''))+'g'+(!''+[]).charAt((+''))+'h'] && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery[(''[+[]]+'').charAt(((-~-~''<<-~[])+-~[]))+(![]+[]).charAt((-~-~''-~''))+'W'+([][+[]]+'').charAt(((-~-~''<<-~'')+-~''))+([][+[]]+'').charAt((-~''))+(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+'w']( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem[(''[+[]]+'').charAt((-~-~[]))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+([][+[]]+'').charAt((-''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~''))+(!''+'').charAt((-[]))][(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(''[+[]]+'').charAt((-[]))+'m'+([][+[]]+'').charAt((-~-~''-~[]))+([][+[]]+'').charAt((-~[]))+(!''+'').charAt((+''))+((''[+[]]+'').charAt((-~-~[]-~'')))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(![]+'').charAt((-~[]))+(![]+[]).charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~-~''-~[]))]()+(!{}+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+(''[+[]]+'').charAt((-~-~[]-~''))+([][+[]]+'').charAt((-~''))+(!''+[]).charAt((-''))][ "client" + name ];
				}

				// Get document width or height
				if ( elem[([][+[]]+'').charAt((-~[]))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]-~[]))+((!''+'').charAt((+[])))[(!''+'').charAt((+''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'C'+(![]+'').charAt((-~''))+(!!''+[]).charAt((-~-~[]-~[]))+(''[+[]]+'').charAt((-~-~[]-~''))]()+'yp'+([][+[]]+'').charAt((-~-~''-~''))] === 9 ) {
					doc = elem[(''[+[]]+'').charAt((-~-~''))+(''+{}).charAt((-~''))+(''+{}).charAt(((-~-~[]<<-~[])+-~[]))+(''[+[]]+'').charAt((+[]))+'m'+(''[+[]]+'').charAt((-~-~[]-~[]))+([][+[]]+'').charAt((-~''))+(!''+'').charAt((-''))+((''[+[]]+'').charAt((-~-~''-~[])))[(!''+'').charAt((-''))+(''+{}).charAt((-~''))+'Upp'+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(!{}+'').charAt((-~-~''-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]()+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))+'m'+([][+[]]+'').charAt((-~-~''-~''))+(''[+[]]+'').charAt((-~[]))+(!''+[]).charAt((+[]))];

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math['m'+(![]+'').charAt((-~''))+'x'](
						elem[(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+(''[+[]]+'').charAt((-~-~[]))+'y'][ "scroll" + name ], doc[ "scroll" + name ],
						elem[(''+{}).charAt((-~-~''))+(''+{}).charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+'y'][ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery[(''+{}).charAt(((-~-~[]<<-~'')+-~[]))+(!{}+[]).charAt((-~-~''-~''))+(![]+'').charAt((-~-~[]-~[]))]( elem, type, extra ) :

					// Set width or height on the element
					jQuery[(![]+[]).charAt((-~-~''-~''))+(!''+'').charAt((+''))+'y'+(![]+[]).charAt((-~-~[]))+(''[+[]]+'').charAt((-~-~''-~''))]( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery[(![]+[]).charAt((+[]))+([][+[]]+'').charAt((-~[]))][(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt(((-~-~''<<-~[])+-~''))+'z'+([][+[]]+'').charAt((-~-~[]-~[]))] = function() {
	return this[(!{}+'').charAt((-~-~''))+(''[+[]]+'').charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~[]))+'g'+(!''+[]).charAt((-''))+'h'];
};

jQuery[(!{}+[]).charAt((-[]))+(''[+[]]+'').charAt((-~''))][(!{}+[]).charAt((-~[]))+([][+[]]+'').charAt((-~[]))+([][+[]]+'').charAt((-~-~''))+((!{}+'').charAt((-~-~[]-~'')))[(!''+'').charAt((+[]))+(''+{}).charAt((-~''))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~[]))+'C'+(!{}+[]).charAt((-~''))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~[]-~[]))]()+(''[+[]]+'').charAt((-~-~''-~''))+(![]+'').charAt((-~-~''))+(![]+[]).charAt((+[]))] = jQuery[(![]+'').charAt((+''))+(''[+[]]+'').charAt((-~''))][(!!''+[]).charAt((-~''))+([][+[]]+'').charAt((-~-~[]))+([][+[]]+'').charAt((-~-~[]))+((''+{}).charAt((-~-~'')))[(!''+'').charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~''-~[]))+(!''+'').charAt((-~''))+'C'+(!!''+[]).charAt((-~[]))+(![]+[]).charAt((-~-~[]-~''))+(''[+[]]+'').charAt((-~-~''-~''))]()+(!!''+[]).charAt((-~[]))+(''+{}).charAt(((-~-~''<<-~'')+-~[]))+'k'];




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define[(!{}+[]).charAt((-~''))+'m'+(''[+[]]+'').charAt((-~-~[]))] ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window[(''+{}).charAt((-~-~[]-~[]))+'Q'+(''[+[]]+'').charAt((+''))+([][+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~''))+'y'],

	// Map over the $ in case of overwrite
	_$ = window['$'];

jQuery[(''[+[]]+'').charAt((-~''))+(''+{}).charAt((-~[]))+((''+{}).charAt(((-~-~[]<<-~[])+-~[])))[(!''+[]).charAt((+''))+(''+{}).charAt((-~[]))+'Upp'+([][+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~[]))+'C'+(!!''+[]).charAt((-~''))+(!!''+[]).charAt((-~-~''-~''))+([][+[]]+'').charAt((-~-~''-~[]))]()+(''+{}).charAt((-~''))+([][+[]]+'').charAt((-~[]))+(![]+[]).charAt((-''))+(!!''+[]).charAt((-~-~[]))+([][+[]]+'').charAt(((-~-~[]<<-~[])+-~''))+(''+{}).charAt(((-~-~''<<-~[])+-~''))+(!''+[]).charAt((+''))] = function( deep ) {
	if ( window['$'] === jQuery ) {
		window['$'] = _$;
	}

	if ( deep && window[(''+{}).charAt((-~-~[]-~[]))+'Q'+(''[+[]]+'').charAt((-[]))+([][+[]]+'').charAt((-~-~''-~''))+(!''+[]).charAt((-~''))+'y'] === jQuery ) {
		window[(''+{}).charAt((-~-~''-~''))+'Q'+(''[+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~''-~''))+(!''+'').charAt((-~[]))+'y'] = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window[(''+{}).charAt((-~-~''-~''))+'Q'+([][+[]]+'').charAt((+''))+(''[+[]]+'').charAt((-~-~[]-~[]))+(!''+[]).charAt((-~''))+'y'] = window['$'] = jQuery;
}




return jQuery;

}));